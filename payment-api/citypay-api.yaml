openapi: 3.0.0

################################################################################
#                              API Information                                 #
################################################################################
info:
  version: 6.2.1
  title: CityPay Payment API
  description: |

    This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It
    provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing,
    3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and
    Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.

    ## Compliance and Security
    <aside class="notice">
      Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely
      and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including:
    </aside>

    * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at
      lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments
      as part of our compliance program.
    * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or
      primary access number (PAN)
    * The application must not display the full card number on receipts, it is recommended to mask the PAN
      and show the last 4 digits. The API will return this for you for ease of receipt creation
    * If you are developing a website, you will be required to perform regular scans on the network where you host the
      application to meet your compliance obligations
    * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information
      is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/)
    * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP
      address. Our application firewalls analyse data that may be an attempt to break a large number of security common
      security vulnerabilities.


  contact:
    name: CityPay Support
    url: https://citypay.com/customer-centre/technical-support.html
    email: support@citypay.com

# during dev, should point to your local machine
servers:
- url: https://api.citypay.com/v6
  description: Production processing endpoint
- url: https://sandbox.citypay.com/v6
  description: Testing service returning test results for all transactions

tags:
  - name: Card Holder Account
    description: |
      A Card holder account models a card holder and can register 1 or more cards for charging
      against. The account offers a credential on file option to the CityPay gateway alowing for 
      both card holder initiated and merchant initiated transaction processing.
      
      This can included unscheduled or scheduled transactions that can be requested through this API.
  - name: Operational
    description: Operations that are for operational purposes only such as checking connectivity to the API.
  - name: Payment Processing
    description: |
      The Payment Processing API offers standard and enhanced payment processing for MOTO, e-commerce
       and continuous authority transactions that include fraud and risk checking, 3D-Secure flows 
       and payment querying.

#--------------------------------------------------------------------------------
#                                    Paths                                     
#--------------------------------------------------------------------------------

paths:
  /account/{accountid}/register: 
    post: 
      summary: Card Registration
      tags: 
        - Card Holder Account
      operationId: AccountCardRegisterRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Allows for a card to be registered for the account. The card will be added for future 
        processing and will be available as a tokenised value for future processing.
        
        The card will be validated for
        
        0. Being a valid card number (luhn check)
        0. Having a valid expiry date
        0. Being a valid bin value.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/RegisterCard'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/RegisterCard'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A successfully registered card provides a reload of the account including the new card.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'

  /account/{accountid}: 
    get: 
      summary: Account Retrieval
      tags: 
        - Card Holder Account
      operationId: AccountRetrieveRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Allows for the retrieval of a card holder account for the given `id`. Should duplicate accounts exist
        for the same `id`, the first account created with that `id` will be returned.
        
        The account can be used for tokenisation processing by listing all cards assigned to the account.
        The returned cards will include all `active`, `inactive` and `expired` cards. This can be used to 
        enable a card holder to view their wallet and make constructive choices on which card to use.
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A card holder account that matches the account id provided in the request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
    delete: 
      summary: Account Deletion
      tags: 
        - Card Holder Account
      operationId: AccountDeleteRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further
        transactions will be alowed to be processed or actioned against this account.
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: An acknowledgment code of `001` that the card holder account has been marked for deletion.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'

  /ping: 
    post: 
      summary: Ping Request
      tags: 
        - Operational
      operationId: PingRequest
      description: |
        A ping request which performs a connection and authentication test to the CityPay API server. The request
        will return a standard Acknowledgement with a response code `044` to signify a successful
        ping.
        
        The ping call is useful to confirm that you will be able to access 
        the API from behind any firewalls and that the permission
        model is granting access from your source.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/Ping'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/Ping'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A result of the ping request, returning on 044 response code on successful receipt of the ping request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'

  /capture: 
    post: 
      summary: Capture
      tags: 
        - Payment Processing
      operationId: CaptureRequest
      description: |
        _The capture process only applies to transactions which have been pre-authorised only._ 
        
        The capture process will ensure
        that a transaction will now settle. It is expected that a capture call will be provided within 3 days or
        a maximum of 7 days.
        
        A capture request is provided to confirm that you wish the transaction to be settled. This request can
        contain a final amount for the transaction which is different to the original authorisation amount. This
        may be useful in a delayed system process such as waiting for stock to be ordered, confirmed, or services
        provided before the final cost is known.
        
        When a transaction is completed, a new authorisation code may be created and a new confirmation
        can be sent online to the acquiring bank.
        
        Once the transaction has been processed. A standard [`Acknowledgement`](#acknowledgement) will be returned,
        outlining the result of the transaction. On a successful completion process, the transaction will
        be available for the settlement and completed at the end of the day.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/CaptureRequest'
            examples: 
              example3: 
                summary: Capture call for a merchant with identifier and airline data once a ticket has been issued
                externalValue: 'CaptureRequest-example3.json'
              example2: 
                summary: Basic capture call for a merchant with a transno and final amount
                externalValue: 'CaptureRequest-example2.json'
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'CaptureRequest-example1.json'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/CaptureRequest'
            examples: 
              example3: 
                summary: Capture call for a merchant with identifier and airline data once a ticket has been issued
                externalValue: 'CaptureRequest-example3.xml'
              example2: 
                summary: Basic capture call for a merchant with a transno and final amount
                externalValue: 'CaptureRequest-example2.xml'
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'CaptureRequest-example1.xml'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A result and acknowledgement of the capture request. The response will return a `000/001` response on a successful capture otherwise an error code response explaining the error.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'

  /account-exists/{accountid}: 
    get: 
      summary: Account Exists
      tags: 
        - Card Holder Account
      operationId: AccountExistsRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Checks that an account exists and is active by providing the account id as a url parameter 
        Checks that an account exists and is active by providing the account id as a url parameter.
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A response model determining whether the account exists, if exists is true, a last modified date of the account is also provided.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Exists'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Exists'

  /account/{accountid}/contact: 
    post: 
      summary: Contact Details Update
      tags: 
        - Card Holder Account
      operationId: AccountChangeContactRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: Allows for the ability to change the contact details for an account.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/ContactDetails'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/ContactDetails'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A revised account with the new details set.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'

  /account/{accountid}/card/{cardId}/status: 
    post: 
      summary: Card Status
      tags: 
        - Card Holder Account
      operationId: AccountCardStatusRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
        - name: cardId
          in: path
          required: true
          description: The id of the card that is presented by a call to retrieve a card holder account.
          schema: 
            type: string
      description: |
        Updates the status of a card for processing. The following values are available
        
        | Status | Description | 
        |--------|-------------|
        | Active | The card is active for processing and can be used for charging against with a valid token |
        | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge |
        | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued |
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/CardStatus'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/CardStatus'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: </br>Acknowledges the card status has changed, returning a response code of `001` for a valid change or `000` for a non valid change.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'

  /account/create: 
    post: 
      summary: Account Create
      tags: 
        - Card Holder Account
      operationId: AccountCreate
      description: Creates a new card holder account and initialises the account ready for adding cards.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/AccountCreate'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/AccountCreate'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: Provides an initialised account.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'

  /refund: 
    post: 
      summary: Refund
      tags: 
        - Payment Processing
      operationId: RefundRequest
      description: |
        A refund request which allows for the refunding of a previous transaction up 
        and to the amount of the original sale. A refund will be performed against the 
        original card used to process the transaction.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/RefundRequest'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/RefundRequest'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A result of the refund of sale processing.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'

  /void: 
    post: 
      summary: Void
      tags: 
        - Payment Processing
      operationId: VoidRequest
      description: |
        _The void process generally applies to transactions which have been pre-authorised only however voids can occur 
        on the same day if performed before batching and settlement._ 
        
        The void process will ensure that a transaction will now settle. It is expected that a void call will be 
        provided on the same day before batching and settlement or within 3 days or within a maximum of 7 days.
        
        Once the transaction has been processed as a void, an [`Acknowledgement`](#acknowledgement) will be returned,
        outlining the result of the transaction.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/VoidRequest'
            examples: 
              example2: 
                summary: Basic capture call for a merchant with a transno and final amount
                externalValue: 'VoidRequest-example2.json'
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'VoidRequest-example1.json'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/VoidRequest'
            examples: 
              example2: 
                summary: Basic capture call for a merchant with a transno and final amount
                externalValue: 'VoidRequest-example2.xml'
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'VoidRequest-example1.xml'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: </br>A result and acknowledgement of the void request, returning an `080/003` response code on successful void/cancellation of the transaction.</br></br>If an error occurs an error code will be returned explaining the failure.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'

  /account/{accountid}/status: 
    post: 
      summary: Account Status
      tags: 
        - Card Holder Account
      operationId: AccountStatusRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Updates the status of an account. An account can have the following statuses applied
        
        | Status | Description |
        |--------|-------------|
        | Active | The account is active for processing |
        | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing |
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/AccountStatus'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/AccountStatus'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: An acknowledgment that the card holder account status has been updated.</br></br>A response code of `001` is returned if the request was accepted or no change required.</br></br>A response code of `000` is returned if the request contains invalid data.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'

  /account/{accountid}/card/{cardId}: 
    delete: 
      summary: Card Deletion
      tags: 
        - Card Holder Account
      operationId: AccountCardDeleteRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
        - name: cardId
          in: path
          required: true
          description: The id of the card that is presented by a call to retrieve a card holder account.
          schema: 
            type: string
      description: |
        Deletes a card from the account. The card will be marked for deletion before a subsequent
        purge will clear the card permanently.
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: Acknowledges the card has been requested for deletion. A response code of `001` is returned if the account is available for deletion otherwise an error code is returned.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'

  /cres: 
    post: 
      summary: CRes
      tags: 
        - Payment Processing
      operationId: CResRequest
      description: |
        The CRes request performs authorisation processing once a challenge request has been completed
        with an Authentication Server (ACS). This challenge response contains confirmation that will
        allow the API systems to return an authorisation response based on the result. Our systems will 
        know out of band via an `RReq` call by the ACS to notify us if the liability shift has been issued.
        
        Any call to the CRes operation will require a previous authorisation request and cannot be called 
        on its own without a previous [request challenge](#requestchallenged) being obtained.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/CResAuthRequest'
            examples: 
              example1: 
                summary: PaRes example request
                externalValue: 'CResRequest-example1.json'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/CResAuthRequest'
            examples: 
              example1: 
                summary: PaRes example request
                externalValue: 'CResRequest-example1.xml'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A result of processing the 3DSv2 authorisation data.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'

  /authorise: 
    post: 
      summary: Authorisation
      tags: 
        - Payment Processing
      operationId: AuthorisationRequest
      description: |
        An authorisation process performs a standard transaction authorisation based on the provided parameters of its request.
        The CityPay gateway will route your transaction via an Acquiring bank for subsequent authorisation to the appropriate card 
        schemes such as Visa or MasterCard.
        
        The authorisation API should be used for server environments to process transactions on demand and in realtime. 
        
        The authorisation API can be used for multiple types of transactions including E-commerce, mail order, telephone order,
        customer present (keyed), continuous authority, pre-authorisation and others. CityPay will configure your account for 
        the appropriate coding and this will perform transparently by the gateway. 
        
        Data properties that are required, may depend on the environment you are conducting payment for. Our API aims to be
         flexible enough to cater for these structures. Our integration team will aid you in providing the necessary data to 
         transact. 
         
         
        ### E-commerce workflows
         
        For E-commerce transactions requiring 3DSv1 and 3DSv2 transactions, the API contains a fully accredited in built mechanism
        to handle authentication.
        
        The gateway has been accredited extensively with both Acquirers and Card Schemes and simplifies the nature of these calls
        into a simple structure for authentication, preventing integrators from performing lengthy and a costly accreditation with
        Visa and MasterCard.
        
        3D-secure has been around for a number of years and aims to shift the liability of a transaction away from a merchant back
        to the card holder. A *liability shift* determines whether a card holder can charge back a transaction as unknown. Effectively
        the process asks for a card holder to authenticate the transaction prior to authorisation producing a Cardholder 
        verification value (CAVV) as evidence of authorisation.
         
        #### 3DSv1
        
        ```json
        { 
          "AuthenticationRequired": {
            "acsurl": "https://bank.com/3DS/ACS",
            "pareq": "SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...",
            "md": "WQgZXZlcnl0aGluZyBiZW"
          }               
        }
        ```
        
        ```xml
        <AuthenticationRequired>
         <acsurl>https://bank.com/3DS/ACS</acsurl>
         <pareq>SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...</pareq>
         <md>WQgZXZlcnl0aGluZyBiZW</md>
        </AuthenticationRequired>
        ```
        
        For E-commerce transactions requiring 3DSv1, the API contains a built in MPI which will be called to check whether the 
        card is participating in 3DSv1 with Verified by Visa or MasterCard SecureCode. We only support Amex SafeKey with 3DSv2. Should the card be enrolled, a payer 
        request (PAReq) value will be created and returned back as an [authentication required](#authenticationrequired) response object. 
        
        Your system will need to process this authentication packet and forward the user's browser to an authentication server (ACS) 
        to gain the user's authentication. Once complete, the ACS will produce a HTTP `POST` call back to the URL supplied in 
         the authentication request as `merchant_termurl`. This URL should behave as a controller and handle the post data from the
          ACS and on a forked server to server HTTP request, forward this data to the [pares authentication url](#pares) for 
          subsequent authorisation processing. You may prefer to provide a processing page whilst this is being processed.
          Processing with our systems should be relatively quick and be between 500ms - 3000ms however it is desirable to let
          the user see that something is happening rather than a pending browser.
          
          The main reason for ensuring that this controller is two fold:
          
          1. We are never in control of the user's browser in a server API call
          2. The controller is actioned on your site to ensure that any post actions from authorisation can be executed in real time
          
        To forward the user to the ACS, we recommend a simple auto submit HTML form.
        
        > Simple auto submit HTML form
        
        ```html
        <html lang="en">
        	<head>
                <title>Forward to ACS</title>
        		<script type="text/javascript">
                function onLoadEvent() { 
                    document.acs.submit(); 
                }
                </script>
                <noscript>You will require JavaScript to be enabled to complete this transaction</noscript>
            </head>
            <body onload="onLoadEvent();">
                <form name="acs" action="{{ACSURL from Response}}" method="POST">
                    <input type="hidden" name="PaReq" value="{{PaReq Packet from Response}}" />
                    <input type="hidden" name="TermUrl" value="{{Your Controller}}" />
                    <input type="hidden" name="MD" value="{{MD From Response}}" />
                </form>
            </body>
        </html>
        ```
        
        Please note that 3DSv1 is being phased out due to changes to strong customer authentication mechanisms. 3DSv2 addresses
        this and will solidify the authorisation and confirmation process.
        
        We provide a Test ACS for full 3DSv1 integration testing that simulates an ACS. 
        
        
        #### 3DSv2
        
        ```json
        { 
          "RequestChallenged": {
            "acsurl": "https://bank.com/3DS/ACS",
            "creq": "SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00..."
          }               
        }
        ```
        
        ```xml
        <RequestChallenged>
         <acsurl>https://bank.com/3DS/ACS</acsurl>
         <creq>SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...</creq>
        </RequestChallenged>
        ```
        
        All merchants in the EEC will require to migrate their E-commerce transactions to a secure customer authentication 
        model (SCA) throughout 2020. This has been adopted by the payment's industry as a progressive move alongside the European 
        Unions payments service directive.
        
        CityPay support 3DSv2 for Verified by Visa, MasterCard Identity Check and American Express SafeKey 2.0 and will be rolling
        out acquirers on the new platform from Q4 2020. The new enhancement to 3DSv2 will allow for CityPay to seamlessly authenticate
        transactions in a "frictionless" flowed method which will authenticate low risk transactions with minimal impact to a 
        standard authorisation flow. Our API simply performs this on behalf of the merchant and cardholder. For these transactions
        you will not be required to change anything.
        
        However, should a transaction be "challenged" the API will return a [request challenge](#requestchallenged) which will 
        require your integration to forward the cardholder's browser to the given [ACS url](#acsurl) by posting the [creq](#creq)
        value. Once complete, the ACS will have already been in touch with our servers by sending us a result of the authentication
        known as `RReq`.
        
        Our servers however will await confirmation that the authorisation should continue and on receipt of a [cres](#cres)
        value, the flow will perform full authorisation processing. 
        
        Please note that the CRes returned to us is purely a mechanism of acknowledging that transactions should be committed for
        authorisation. The ACS by this point will have sent us the verification value (CAVV) to perform a liability shift. The CRes
        value will be validated for receipt of the CAVV and subsequently may return back response codes illustrating this. 
        
        To forward the user to the ACS, we recommend a simple auto submit HTML form.
        
        > Simple auto submit HTML form
        
        ```html
        <html lang="en">
        	<head>
                <title>Forward to ACS</title>
        		<script type="text/javascript">
                function onLoadEvent() { 
                    document.acs.submit(); 
                }
                </script>
                <noscript>You will require JavaScript to be enabled to complete this transaction</noscript>
            </head>
            <body onload="onLoadEvent();">
                <form name="acs" action="{{ACSURL from Response}}" method="POST">
                    <input type="hidden" name="creq" value="{{CReq Packet from Response}}" />
                </form>
            </body>
        </html>
        ```
        
        We are currently working on an integration test suite for 3DSv2 which will mock the ACS challenge process.
                
        ### Testing 3DSv2 Integrations
        
        The API provides a mock 3dsV2 handler which performs a number of scenarios based on the value of the CSC in the request.
        
        | CSC Value | Behaviour |
        |-----------|-----------|
        | 731       | Frictionless processing - Not authenticated |
        | 732       | Frictionless processing - Account verification count not be performed |        
        | 733       | Frictionless processing - Verification Rejected |        
        | 741       | Frictionless processing - Attempts Processing |        
        | 750       | Frictionless processing - Authenticated  |        
        | 761       | Triggers an error message |  
        | Any       | Challenge Request |
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/AuthRequest'
            examples: 
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'AuthorisationRequest-example1.json'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/AuthRequest'
            examples: 
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'AuthorisationRequest-example1.xml'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A decision made by the result of processing.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Decision'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Decision'

  /retrieve: 
    post: 
      summary: Retrieval
      tags: 
        - Payment Processing
      operationId: RetrievalRequest
      description: |
        A retrieval request which allows an integration to obtain the result of a transaction processed
        in the last 90 days. The request allows for retrieval based on the identifier or transaction 
        number. 
        
        The process may return multiple results in particular where a transaction was processed multiple
        times against the same identifier. This can happen if errors were first received. The API therefore
        returns up to the first 5 transactions in the latest date time order.
        
        It is not intended for this operation to be a replacement for reporting and only allows for base transaction
        information to be returned.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/RetrieveRequest'
            examples: 
              example1: 
                summary: Basic retrieval call for a merchant with a given identifier
                externalValue: 'RetrievalRequest-example1.json'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/RetrieveRequest'
            examples: 
              example1: 
                summary: Basic retrieval call for a merchant with a given identifier
                externalValue: 'RetrievalRequest-example1.xml'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A result of the retrieval request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/AuthReferences'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/AuthReferences'

  /charge: 
    post: 
      summary: Charge
      tags: 
        - Card Holder Account
      operationId: ChargeRequest
      description: |
        A charge process obtains an authorisation using a tokenised value which represents a stored card 
        on a card holder account. 
        A card must previously be registered by calling `/account-register-card` with the card details 
        or retrieved using `/account-retrieve`
        
        Tokens are generated whenever a previously registered list of cards are retrieved. Each token has, by design a 
        relatively short time to live of 30 minutes. This is both to safe guard the merchant and card holder from 
        replay attacks. Tokens are also restricted to your account, preventing malicious actors from stealing details
        for use elsewhere.  
        
        If a token is reused after it has expired it will be rejected and a new token will be required.
         
        Tokenisation can be used for
         
        - repeat authorisations on a previously stored card
        - easy authorisations just requiring CSC values to be entered
        - can be used for credential on file style payments
        - can require full 3-D Secure authentication to retain the liability shift
        - wallet style usage.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/ChargeRequest'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/ChargeRequest'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A decision met by the result of the charge.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Decision'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Decision'

  /merchants/{clientid}: 
    get: 
      summary: List Merchants Request
      tags: 
        - Operational
      operationId: ListMerchantsRequest
      parameters: 
        - name: clientid
          in: path
          required: true
          description: The client id to return merchants for, specifying "default" will use the value in your api key.
          schema: 
            type: string
      description: |
        An operational request to list current merchants for a client.
        
        ### Sorting
        
        Sorting can be performed by include a query parameter i.e. `/merchants/?sort=merchantid`
        
        Fields that can be sorted are `merchantid` or `name`.
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A list of merchants that are configured against the client id.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ListMerchantsResponse'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/ListMerchantsResponse'

  /pares: 
    post: 
      summary: PaRes
      tags: 
        - Payment Processing
      operationId: PaResRequest
      description: |
        The Payer Authentication Response (PaRes) is an operation after the result of authentication 
         being performed. The request uses an encoded packet of authentication data to 
        notify us of the completion of the liability shift. Once this value has been unpacked and its
        signature is checked, our systems will proceed to authorisation processing.  
        
        Any call to the PaRes operation will require a previous authorisation request and cannot be called 
        on its own without a previous [authentication required](#authenticationrequired)  being obtained.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/PaResAuthRequest'
            examples: 
              example1: 
                summary: PaRes example request
                externalValue: 'PaResRequest-example1.json'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/PaResAuthRequest'
            examples: 
              example1: 
                summary: PaRes example request
                externalValue: 'PaResRequest-example1.xml'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A result of processing the 3DSv1 authorisation data.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'



#--------------------------------------------------------------------------------
#                              Components/Schemas                              
#--------------------------------------------------------------------------------

components:
  schemas:
    CardHolderAccount: 
      type: object
      required: 
        - account_id
        - contact
      properties: 
        account_id: 
          type: string
          minLength: 5
          maxLength: 50
          example: aaabbb-cccddd-eee
          description: |
            The account id of the card holder account provided by the merchant which uniquely identifies the account.
        cards: 
          type: array
          items:
            $ref: '#/components/schemas/Card'
        contact: 
          $ref: '#/components/schemas/ContactDetails'
          x-description: Contact details that refer to this account.
        date_created: 
          type: string
          format: date-time
          example: 2020-01-02T18:32:28Z
          description: The date and time the account was created.
        default_card_id: 
          type: string
          description: The id of the default card.
        default_card_index: 
          type: integer
          format: int32
          description: The index in the array of the default card.
        last_modified: 
          type: date-time
          example: 2020-01-02T18:32:28Z
          description: The date and time the account was last modified.
        status: 
          type: string
          description: |
            Defines the status of the account for processing valid values are
            
             - ACTIVE for active accounts that are able to process
            
             - DISABLED for accounts that are currently disabled for processing.
        unique_id: 
          type: string
          description: A unique id of the card holder account which uniquely identifies the stored account. This value is not searchable.
    AuthResponse: 
      type: object
      properties: 
        amount: 
          type: integer
          format: int32
          minLength: 1
          maxLength: 12
          example: 3600
          description: The amount of the transaction processed.
        atrn: 
          type: string
          description: |
            A reference number provided by the acquirer for a transaction it can be used to cross reference transactions
            with an Acquirers reporting panel.
        atsd: 
          type: string
          description: Additional Transaction Security Data used for ecommerce transactions to decipher security capabilities and attempts against a transaction.
        authcode: 
          type: string
          example: 001245A
          description: |
            The authorisation code as returned by the card issuer or acquiring bank when a transaction has successfully
              been authorised. Authorisation codes contain alphanumeric values. Whilst the code confirms authorisation it
              should not be used to determine whether a transaction was successfully processed. For instance an auth code
              may be returned when a transaction has been subsequently declined due to a CSC mismatch.
        authen_result: 
          type: string
          description: |
            The result of any authentication using 3d_secure authorisation against ecommerce transactions. Values are:
            
            <table>
            <tr>
            <th>Value</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>Y</td>
            <td>Authentication Successful. The Cardholder's password was successfully validated.</td>
            </tr>
            <tr>
            <td>N</td>
            <td>Authentication Failed. Customer failed or cancelled authentication, transaction denied.</td>
            </tr>
            <tr>
            <td>A</td>
            <td>Attempts Processing Performed Authentication could not be completed but a proof of authentication attempt (CAVV) was generated.</td>
            </tr>
            <tr>
            <td>U</td>
            <td>Authentication Could Not Be Performed Authentication could not be completed, due to technical or other problem.</td>
            </tr>
            </table>
        authorised: 
          type: boolean
          example: true
          description: |
            A boolean definition that indicates that the transaction was authorised. It will return false if the transaction
             was declined, rejected or cancelled due to CSC matching failures.
            
            Attention should be referenced to the AuthResult and Response code for accurate determination of the result.
        avs_result: 
          type: string
          minLength: 1
          maxLength: 1
          description: |
            The AVS result codes determine the result of checking the AVS values within the
            Address Verification fraud system. If a transaction is declined due to the AVS code not matching,
            this value can help determine the reason for the decline.
            
            <table>
            <tr>
            <th>Code</th>
            <th>Description</th>
            </tr>
            <tr><td>Y</td><td>Address and 5 digit post code match</td></tr>
            <tr><td>M</td><td>Street address and Postal codes match for international transaction</td></tr>
            <tr><td>U</td><td>No AVS data available from issuer auth system</td></tr>
            <tr><td>A</td><td>Addres matches, post code does not</td></tr>
            <tr><td>I</td><td>Address information verified for international transaction</td></tr>
            <tr><td>Z</td><td>5 digit post code matches, Address does not</td></tr>
            <tr><td>W</td><td>9 digit post code matches, Address does not</td></tr>
            <tr><td>X</td><td>Postcode and address match</td></tr>
            <tr><td>B</td><td>Postal code not verified due to incompatible formats</td></tr>
            <tr><td>P</td><td>Postal codes match. Street address not verified due to to incompatible formats</td></tr>
            <tr><td>E</td><td>AVS Error</td></tr>
            <tr><td>C</td><td>Street address and Postal code not verified due to incompatible formats</td></tr>
            <tr><td>D</td><td>Street address and postal codes match</td></tr>
            <tr><td> </td><td>No information</td></tr>
            <tr><td>N</td><td>Neither postcode nor address match</td></tr>
            <tr><td>R</td><td>Retry, System unavailble or Timed Out</td></tr>
            <tr><td>S</td><td>AVS Service not supported by issuer or processor</td></tr>
            <tr><td>G</td><td>Issuer does not participate in AVS</td></tr>
            </table>
        bin_commercial: 
          type: boolean
          description: Determines whether the bin range was found to be a commercial or business card.
        bin_debit: 
          type: boolean
          description: Determines whether the bin range was found to be a debit card. If false the card was considered as a credit card.
        bin_description: 
          type: string
          description: A description of the bin range found for the card.
        cavv: 
          type: string
          description: |
            The cardholder authentication verification value which can be returned for verification purposes of the authenticated
             transaction for dispute realisation.
        context: 
          type: string
          example: aspiu352908ns47n343598bads
          description: The context which processed the transaction, can be used for support purposes to trace transactions.
        csc_result: 
          type: string
          minLength: 1
          maxLength: 1
          description: |
            The CSC rseult codes determine the result of checking the provided CSC value within the
            Card Security Code fraud system. If a transaction is declined due to the CSC code not matching,
            this value can help determine the reason for the decline.
            
            <table>
            <tr>
            <th>Code</th>
            <th>Description</th>
            </tr>
            <tr><td> </td><td>No information</td></tr>
            <tr><td>M</td><td>Card verification data matches</td></tr>
            <tr><td>N</td><td>Card verification data was checked but did not match</td></tr>
            <tr><td>P</td><td>Card verification was not processed</td></tr>
            <tr><td>S</td><td>The card verification data should be on the card but the merchant indicates that it is not</td></tr>
            <tr><td>U</td><td>The card issuer is not certified</td></tr>
            </table>
        currency: 
          type: string
          minLength: 3
          maxLength: 3
          example: GBP
          description: The currency the transaction was processed in. This is an `ISO4217` alpha currency value.
        datetime: 
          type: string
          format: date-time
          example: 2020-01-02T18:32:28Z
          description: |
            The UTC date time of the transaction in ISO data time format.
        eci: 
          type: string
          description: |
            An Electronic Commerce Indicator (ECI) used to identify the result of authentication using 3DSecure.
        identifier: 
          type: string
          minLength: 4
          maxLength: 50
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          description: The identifier provided within the request.
        live: 
          type: boolean
          example: true
          description: Used to identify that a transaction was processed on a live authorisation platform.
        maskedpan: 
          type: string
          example: 4***********0002
          description: |
            A masked value of the card number used for processing displaying limited values that can be used on a receipt.
        merchantid: 
          type: integer
          format: int32
          example: 11223344
          description: The merchant id that processed this transaction.
        result: 
          type: integer
          format: int32
          example: 1
          description: |
            An integer result that indicates the outcome of the transaction. The Code value below maps to the result value
            
            <table>
            <tr>
            <th>Code</th>
            <th>Abbrev</th>
            <th>Description</th>
            </tr>
            <tr><td>0</td><td>Declined</td><td>Declined</td></tr>
            <tr><td>1</td><td>Accepted</td><td>Accepted</td></tr>
            <tr><td>2</td><td>Rejected</td><td>Rejected</td></tr>
            <tr><td>3</td><td>Not Attempted</td><td>Not Attempted</td></tr>
            <tr><td>4</td><td>Referred</td><td>Referred</td></tr>
            <tr><td>5</td><td>PinRetry</td><td>Perform PIN Retry</td></tr>
            <tr><td>6</td><td>ForSigVer</td><td>Force Signature Verification</td></tr>
            <tr><td>7</td><td>Hold</td><td>Hold</td></tr>
            <tr><td>8</td><td>SecErr</td><td>Security Error</td></tr>
            <tr><td>9</td><td>CallAcq</td><td>Call Acquirer</td></tr>
            <tr><td>10</td><td>DNH</td><td>Do Not Honour</td></tr>
            <tr><td>11</td><td>RtnCrd</td><td>Retain Card</td></tr>
            <tr><td>12</td><td>ExprdCrd</td><td>Expired Card</td></tr>
            <tr><td>13</td><td>InvldCrd</td><td>Invalid Card No</td></tr>
            <tr><td>14</td><td>PinExcd</td><td>Pin Tries Exceeded</td></tr>
            <tr><td>15</td><td>PinInvld</td><td>Pin Invalid</td></tr>
            <tr><td>16</td><td>AuthReq</td><td>Authentication Required</td></tr>
            <tr><td>17</td><td>AuthenFail</td><td>Authentication Failed</td></tr>
            <tr><td>18</td><td>Verified</td><td>Card Verified</td></tr>
            <tr><td>19</td><td>Cancelled</td><td>Cancelled</td></tr>
            <tr><td>20</td><td>Un</td><td>Unknown</td></tr>
            </table>
        result_code: 
          type: string
          example: 000
          description: |
            The result code as defined in the Response Codes Reference for example 000 is an accepted live
            transaction whilst 001 is an accepted test transaction. Result codes identify the source of success and failure.
            
            Codes may start with an alpha character i.e. C001 indicating a type of error such as a card validation error.
        result_message: 
          type: string
          example: Accepted Transaction
          description: |
            The message regarding the result which provides further narrative to the result code.
        scheme: 
          type: string
          example: Visa
          description: |
            A name of the card scheme of the transaction that processed the transaction such as Visa or MasterCard.
        sha256: 
          type: string
          example: 
          description: |
            A SHA256 digest value of the transaction used to validate the response data
            The digest is calculated by concatenating
            
             * authcode
            
             * amount
            
             * response_code
            
             * merchant_id
            
             * trans_no
            
             * identifier
            
             * licence_key - which is not provided in the response.
        trans_status: 
          type: string
          description: |
            Used to identify the status of a transaction. The status is used to track a transaction through its life cycle.
            
            <table>
            <tr>
            <th>Id</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>O</td>
            <td>Transaction is open for settlement</td>
            </tr>
            <tr>
            <td>A</td>
            <td>Transaction is assigned for settlement and can no longer be voided</td>
            </tr>
            <tr>
            <td>S</td>
            <td>Transaction has been settled</td>
            </tr>
            <tr>
            <td>D</td>
            <td>Transaction has been declined</td>
            </tr>
            <tr>
            <td>R</td>
            <td>Transaction has been rejected</td>
            </tr>
            <tr>
            <td>P</td>
            <td>Transaction has been authorised only and awaiting a capture. Used in pre-auth situations</td>
            </tr>
            <tr>
            <td>C</td>
            <td>Transaction has been cancelled</td>
            </tr>
            <tr>
            <td>E</td>
            <td>Transaction has expired</td>
            </tr>
            <tr>
            <td>I</td>
            <td>Transaction has been initialised but no action was able to be carried out</td>
            </tr>
            <tr>
            <td>H</td>
            <td>Transaction is awaiting authorisation</td>
            </tr>
            <tr>
            <td>.</td>
            <td>Transaction is on hold</td>
            </tr>
            <tr>
            <td>V</td>
            <td>Transaction has been verified</td>
            </tr>
            </table>
        transno: 
          type: integer
          format: int32
          example: 78416
          description: |
            The resulting transaction number, ordered incrementally from 1 for every merchant_id. The value will default to less than 1
            for transactions that do not have a transaction number issued.
    ChargeRequest: 
      type: object
      required: 
        - amount
        - identifier
        - merchantid
        - token
      properties: 
        amount: 
          type: integer
          format: int32
          minLength: 1
          maxLength: 12
          example: 3600
          description: |
            The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.
            
            No decimal points are to be included and no divisional characters such as 1,024.
            
            The amount should be the total amount required for the transaction.
            
            For example with GBP £1,021.95 the amount value is 102195.
        avs_postcode_policy: 
          type: string
          description: |
            A policy value which determines whether an AVS postcode policy is enforced or bypassed.
            
            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
            
             `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.
            
             `2` to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.
            
             `3` to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.
        csc: 
          type: string
          minLength: 3
          maxLength: 4
          example: 012
          description: |
            The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card
            (American Express has it on the front). The value helps to identify posession of the card as it is not
            available within the chip or magnetic swipe.
            
            When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped
            out by any integer parsing.
            
            The CSC number aids fraud prevention in Mail Order and Internet payments.
            
            Business rules are available on your account to identify whether to accept
            or decline transactions based on mismatched results of the CSC.
            
            The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.
            
            This applies to all entities handling card data.
            
            It should also not be used in any hashing process.
            
            CityPay do not store the value and have no method of retrieving the value once the transaction has been processed.
            For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.
        csc_policy: 
          type: string
          description: |
            A policy value which determines whether a CSC policy is enforced or bypassed.
            
            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
            
             `1` for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.
            
             `2` to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.
            
             `3` to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.
        currency: 
          type: string
          minLength: 3
          maxLength: 3
          example: GBP
          description: The processing currency for the transaction. Will default to the merchant account currency.
        duplicate_policy: 
          type: string
          description: |
            A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window
            of time set against your account within which it can action. If a previous transaction with matching values occurred within
            the window, any subsequent transaction will result in a T001 result.
            
            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
            
             `1` for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.
            
             `2` to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.
            
             `3` to ignore. Transactions that are ignored will have the same affect as bypass.
        identifier: 
          type: string
          minLength: 4
          maxLength: 50
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          description: |
            The identifier of the transaction to process. The value should be a valid reference and may be used to perform
             post processing actions and to aid in reconciliation of transactions.
            
            The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.
            
            The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier)
            this will aid in ensuring each transaction is identifiable.
            
            When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent
            request will ensure that a transaction is considered as different.
        match_avsa: 
          type: string
          description: |
            A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.
            
            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
            
             `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.
            
             `2` to bypass. Transactions that are bypassed will be allowed through even if the address did not match.
            
             `3` to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.
        merchantid: 
          type: integer
          format: int32
          example: 11223344
          description: Identifies the merchant account to perform processing for.
        threedsecure: 
          $ref: '#/components/schemas/ThreeDSecure'
          x-description: |
            ThreeDSecure element, providing values to enable full 3DS processing flows.
        token: 
          type: string
          format: base58
          example: ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr
          description: |
            A tokenised form of a card that belongs to a card holder's account and that
            has been previously registered. The token is time based and will only be active for
            a short duration. The value is therefore designed not to be stored remotely for future
            use.
            
            
            Tokens will start with ct and are resiliently tamper proof using HMacSHA-256.
            No sensitive card data is stored internally within the token.
            
            
            Each card will contain a different token and the value may be different on any retrieval call.
            
            
            The value can be presented for payment as a selection value to an end user in a web application.
        trans_info: 
          type: string
          maxLength: 50
          description: Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id.
        trans_type: 
          type: string
          maxLength: 1
          description: The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field.
    RefundRequest: 
      type: object
      required: 
        - amount
        - identifier
        - merchantid
        - refund_ref
      properties: 
        amount: 
          type: integer
          format: int32
          minLength: 1
          maxLength: 12
          example: 3600
          description: |
            The amount to refund in the lowest unit of currency with a variable length to a maximum of 12 digits.
            
            The amount should be the total amount required to refund for the transaction up to the original processed amount.
            
            No decimal points are to be included and no divisional characters such as 1,024.
            
            For example with GBP £1,021.95 the amount value is 102195.
        identifier: 
          type: string
          minLength: 4
          maxLength: 50
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          description: |
            The identifier of the refund to process. The value should be a valid reference and may be used to perform
             post processing actions and to aid in reconciliation of transactions.
            
            The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.
            
            The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier)
            this will aid in ensuring each transaction is identifiable.
            
            When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent
            request will ensure that a transaction is considered as different.
        merchantid: 
          type: integer
          format: int32
          example: 11223344
          description: Identifies the merchant account to perform the refund for.
        refund_ref: 
          type: integer
          format: int32
          example: 8322
          description: |
            A reference to the original transaction number that is wanting to be refunded. The original
             transaction must be on the same merchant id, previously authorised.
        trans_info: 
          type: string
          maxLength: 50
          description: Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id.
    RequestChallenged: 
      type: object
      properties: 
        acs_url: 
          type: string
          format: url
          example: https://acs.cardissuer.com/3dsv1
          description: |
            The url of the Access Control Server (ACS) to forward the user to.
        creq: 
          type: string
          description: The challenge request data which is encoded for usage by the ACS.
        merchantid: 
          type: integer
          format: int32
          example: 11223344
          description: The merchant id that processed this transaction.
        threedserver_trans_id: 
          type: string
          description: The 3DSv2 trans id reference for the challenge process.
        transno: 
          type: integer
          format: int32
          example: 78416
          description: |
            The transaction number for the challenge, ordered incrementally from 1 for every merchant_id.
    AuthReference: 
      type: object
      properties: 
        amount: 
          type: string
          maxLength: 12
          example: 20.00
          description: The amount of the transaction in decimal currency format.
        amount_value: 
          type: integer
          format: int32
          minLength: 1
          maxLength: 12
          example: 3600
          description: The amount of the transaction in integer/request format.
        atrn: 
          type: string
          description: A reference number provided by the acquiring services.
        authcode: 
          type: string
          example: 001245A
          description: The authorisation code of the transaction returned by the acquirer or card issuer.
        batchno: 
          type: string
          description: A batch number which the transaction has been end of day batched towards.
        currency: 
          type: string
          minLength: 3
          maxLength: 3
          example: GBP
          description: The currency of the transaction in ISO 4217 code format.
        datetime: 
          type: string
          format: date-time
          example: 2020-01-02T18:32:28Z
          description: The date and time of the transaction.
        identifier: 
          type: string
          minLength: 4
          maxLength: 50
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          description: The identifier of the transaction used to process the transaction.
        maskedpan: 
          type: string
          example: 4***********0002
          description: A masking of the card number which was used to process the tranasction.
        merchantid: 
          type: integer
          format: int32
          example: 11223344
          description: The merchant id of the transaction result.
        result: 
          type: string
          description: The result of the transaction.
        trans_status: 
          type: string
          description: The current status of the transaction through it's lifecycle.
        trans_type: 
          type: string
          maxLength: 1
          description: The type of transaction that was processed.
        transno: 
          type: integer
          format: int32
          example: 78416
          description: The transaction number of the transaction.
    Card: 
      type: object
      properties: 
        bin_commercial: 
          type: boolean
          description: Defines whether the card is a commercial card.
        bin_corporate: 
          type: boolean
          description: Defines whether the card is a corporate business card.
        bin_country_issued: 
          type: string
          description: The determined country where the card was issued.
        bin_credit: 
          type: boolean
          description: Defines whether the card is a credit card.
        bin_currency: 
          type: string
          description: The default currency determined for the card.
        bin_debit: 
          type: boolean
          description: Defines whether the card is a debit card.
        bin_description: 
          type: string
          description: A description of the bin on the card to identify what type of product the card is.
        bin_eu: 
          type: boolean
          description: Defines whether the card is regulated within the EU.
        card_id: 
          type: string
          description: The id of the card that is returned. Should be used for referencing the card when perform any changes.
        card_status: 
          type: string
          description: |
            The status of the card such, valid values are
            
             - ACTIVE the card is active for processing
            
             - INACTIVE the card is not active for processing
            
             - EXPIRED for cards that have passed their expiry date.
        date_created: 
          type: string
          format: date-time
          example: 2020-01-02T18:32:28Z
          description: The date time of when the card was created.
        default: 
          type: boolean
          description: Determines if the card is the default card for the account and should be regarded as the first option to be used for processing.
        expmonth: 
          type: integer
          format: int32
          example: 9
          minimum: 1
          maximum: 12
          description: The expiry month of the card.
        expyear: 
          type: integer
          format: int32
          example: 2024
          minimum: 2000
          maximum: 2100
          description: The expiry year of the card.
        label: 
          type: string
          example: Visa/0002
          description: A label which identifies this card.
        label2: 
          type: string
          example: Visa/0002,Exp:2304
          description: A label which also provides the expiry date of the card.
        last4digits: 
          type: string
          example: 0002
          description: The last 4 digits of the card to aid in identification.
        scheme: 
          type: string
          example: Visa
          description: The scheme that issued the card.
        token: 
          type: string
          format: base58
          example: ctPCAPyNyCkx3Ry8wGyv8khC3ch2hUSB3Db..Qzr
          description: A token that can be used to process against the card.
    ExternalMPI: 
      type: object
      properties: 
        authen_result: 
          type: string
          maxLength: 1
          description: The authentication result available from the MPI.
        cavv: 
          type: string
          maxLength: 20
          description: A value determining the cardholder verification value supplied by the card scheme.
        eci: 
          type: integer
          format: int32
          maxLength: 1
          description: The obtained e-commerce indicator from the MPI.
        enrolled: 
          type: string
          maxLength: 1
          description: A value determining whether the card holder was enrolled.
        xid: 
          type: string
          maxLength: 20
          description: The XID used for processing with the MPI.
    Acknowledgement: 
      type: object
      properties: 
        code: 
          type: string
          minLength: 3
          maxLength: 4
          example: 000
          description: A response code providing a result of the process.
        context: 
          type: string
          example: aspiu352908ns47n343598bads
          description: A context id of the process used for referencing transactions through support.
        identifier: 
          type: string
          minLength: 4
          maxLength: 50
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          description: An identifier if presented in the original request.
        message: 
          type: string
          example: Approved 044332
          description: A response message providing a description of the result of the process.
    AirlineSegment: 
      type: object
      required: 
        - arrival_location_code
        - carrier_code
        - class_service_code
        - departure_date
        - flight_number
      properties: 
        arrival_location_code: 
          type: string
          maxLength: 3
          example: SOU
          description: |
            A standard airline routing code (airport code or location identifier) applicable to the
            arrival portion of this segment.
        carrier_code: 
          type: string
          maxLength: 2
          example: ZZ
          description: |
            This field contains the two character airline designator code (air carrier code or airline code) that
            corresponds to the airline carrier applicable for up to four flight segments of this trip itinerary.
        class_service_code: 
          type: string
          maxLength: 2
          example: CC
          description: |
            This field contains a code that corresponds to the fare class (A, B, C, D, Premium, Discounted, etc.)
            within the overall class of service (e.g., First Class, Business, Economy) applicable to this travel segment,
            as specified in the IATA Standard Code allocation table.
        departure_date: 
          type: string
          format: date
          example: 2020-08-01
          description: The Departure Date for the travel segment in ISO Date Format (yyyy-MM-dd).
        departure_location_code: 
          type: string
          maxLength: 3
          example: JER
          description: |
            A standard airline routing code (airport code or location identifier) applicable to the
            departure portion of this segment.
        flight_number: 
          type: string
          maxLength: 4
          example: 772
          description: This field contains the carrier-assigned Flight Number for this travel segment.
        segment_fare: 
          type: integer
          format: int32
          example: 7500
          description: This field contains the total Fare for this travel segment.
        stop_over_indicator: 
          type: string
          maxLength: 1
          example: 1
          description: O = Stopover allowed, X = Stopover not allowed.
    Error: 
      type: object
      properties: 
        code: 
          type: string
          minLength: 3
          maxLength: 4
          example: 000
          description: A response code providing a result of the process.
        context: 
          type: string
          example: aspiu352908ns47n343598bads
          description: A context id of the process used for referencing transactions through support.
        identifier: 
          type: string
          minLength: 4
          maxLength: 50
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          description: An identifier if presented in the original request.
        message: 
          type: string
          example: Approved 044332
          description: A response message providing a description of the result of the process.
    CResAuthRequest: 
      type: object
      properties: 
        cres: 
          type: string
          format: base64
          example: x90+vZ/7Ll05Vid/jPfQn8adw+4D/vRDUGT19kndW97Hfirbv66ycfSp8jNlvy7PkHbx44NEt3vo...
          description: |
            The challenge response data forwarded by the ACS in 3D-Secure V2 processing. Data
            should be forwarded to CityPay unchanged for subsequent authorisation and processing.
    MCC6012: 
      type: object
      properties: 
        recipient_account: 
          type: string
          description: The account number of the recipient.
        recipient_dob: 
          type: string
          description: The date of birth of the recipient.
        recipient_lastname: 
          type: string
          description: The lastname of ther recepient.
        recipient_postcode: 
          type: string
          description: The postcode of the recipient.
    RetrieveRequest: 
      type: object
      required: 
        - merchantid
      properties: 
        identifier: 
          type: string
          minLength: 4
          maxLength: 50
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          description: The identifier of the transaction to retrieve. Optional if a transaction number is provided.
        merchantid: 
          type: integer
          format: int32
          example: 11223344
          description: The merchant account to retrieve data for.
        transno: 
          type: integer
          format: int32
          example: 78416
          description: The transaction number of a transaction to retrieve. Optional if an identifier is supplied.
    AuthReferences: 
      type: object
      properties: 
        auths: 
          type: array
          x-description: Authorisations which match the request.
          items: 
            $ref: '#/components/schemas/AuthReference'
    AuthenRequired: 
      type: object
      properties: 
        acs_url: 
          type: string
          format: url
          example: https://acs.cardissuer.com/3dsv1
          description: |
            The url of the Access Control Server (ACS) to forward the user to.
        md: 
          type: string
          description: |
            Merchant Data (MD) which should be sent to the ACS to establish and reference
            the authentication session.
        pareq: 
          type: string
          format: base64
          example: eNrNWdnOo0qSfpXSmUuf0+w2tFy/lOyYxYDZ79h3sAEbm6cfbFfV+bu6pqe7R2qNJeQkiIwlMyK+...
          description: |
            The Payer Authentication Request packet which should be `POSTed` to the Url of the ACS
            to establish the authentication session. Data should be sent untouched.
    Decision: 
      type: object
      properties: 
        AuthenRequired: 
          $ref: '#/components/schemas/AuthenRequired'
          x-description: |
            The request resulted in the transaction participating in 3DSv1 and is required to be authenticated via the ACS.
        AuthResponse: 
          $ref: '#/components/schemas/AuthResponse'
          x-description: |
            A result has been obtained for this transaction either through authorisation or validation.
        RequestChallenged: 
          $ref: '#/components/schemas/RequestChallenged'
          x-description: |
            The request resulted in the transaction participating in 3DSv2 and has been challenged for authentication by the ACS.
    AuthRequest: 
      type: object
      required: 
        - amount
        - cardnumber
        - expmonth
        - expyear
        - identifier
        - merchantid
      properties: 
        airline_data: 
          $ref: '#/components/schemas/AirlineAdvice'
          x-business-extension: Airline
          x-description: |
            Additional advice for airline integration that can be applied on an authorisation request.
            
            As tickets are normally not allocated until successful payment it is normal for a transaction to be pre-authorised
             and the airline advice supplied on a capture request instead. Should the data already exist and an auth and
             capture is preferred. This data may be supplied.
        amount: 
          type: integer
          format: int32
          minLength: 1
          maxLength: 12
          example: 3600
          description: |
            The amount to authorise in the lowest unit of currency with a variable length to a maximum of 12 digits.
            
            No decimal points are to be included and no divisional characters such as 1,024.
            
            The amount should be the total amount required for the transaction.
            
            For example with GBP £1,021.95 the amount value is 102195.
        avs_postcode_policy: 
          type: string
          description: |
            A policy value which determines whether an AVS postcode policy is enforced or bypassed.
            
            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
            
             `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS postcode numeric value does not match.
            
             `2` to bypass. Transactions that are bypassed will be allowed through even if the postcode did not match.
            
             `3` to ignore. Transactions that are ignored will bypass the result and not send postcode details for authorisation.
        bill_to: 
          $ref: '#/components/schemas/ContactDetails'
          x-description: |
            Billing details of the card holder making the payment.
            These details may be used for AVS fraud analysis, 3DS and for future referencing of the transaction.
            
            For AVS to work correctly, the billing details should be the registered address of the card holder
            as it appears on the statement with their card issuer. The numeric details will be passed through
            for analysis and may result in a decline if incorrectly provided.
        card_holder_name: 
          type: string
          description: |
            The card holder name as appears on the card such as MR N E BODY. Required for some acquirers.
        cardnumber: 
          type: string
          minLength: 12
          maxLength: 22
          example: 4000 0000 0000 0002
          description: |
            The card number (PAN) with a variable length to a maximum of 21 digits in numerical form.
            Any non numeric characters will be stripped out of the card number, this includes whitespace or separators internal of the
            provided value.
            
            The card number must be treated as sensitive data. We only provide an obfuscated value in logging and reporting.
             The plaintext value is encrypted in our database using AES 256 GMC bit encryption for settlement or refund purposes.
            
            When providing the card number to our gateway through the authorisation API you will be handling the card data on
            your application. This will require further PCI controls to be in place and this value must never be stored.
        csc: 
          type: string
          minLength: 3
          maxLength: 4
          example: 012
          description: |
            The Card Security Code (CSC) (also known as CV2/CVV2) is normally found on the back of the card
            (American Express has it on the front). The value helps to identify posession of the card as it is not
            available within the chip or magnetic swipe.
            
            When forwarding the CSC, please ensure the value is a string as some values start with 0 and this will be stripped
            out by any integer parsing.
            
            The CSC number aids fraud prevention in Mail Order and Internet payments.
            
            Business rules are available on your account to identify whether to accept
            or decline transactions based on mismatched results of the CSC.
            
            The Payment Card Industry (PCI) requires that at no stage of a transaction should the CSC be stored.
            
            This applies to all entities handling card data.
            
            It should also not be used in any hashing process.
            
            CityPay do not store the value and have no method of retrieving the value once the transaction has been processed.
            For this reason, duplicate checking is unable to determine the CSC in its duplication check algorithm.
        csc_policy: 
          type: string
          description: |
            A policy value which determines whether a CSC policy is enforced or bypassed.
            
            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
            
             `1` for an enforced policy. Transactions that are enforced will be rejected if the CSC value does not match.
            
             `2` to bypass. Transactions that are bypassed will be allowed through even if the CSC did not match.
            
             `3` to ignore. Transactions that are ignored will bypass the result and not send the CSC details for authorisation.
        currency: 
          type: string
          minLength: 3
          maxLength: 3
          example: GBP
          description: The processing currency for the transaction. Will default to the merchant account currency.
        duplicate_policy: 
          type: string
          description: |
            A policy value which determines whether a duplication policy is enforced or bypassed. A duplication check has a window
            of time set against your account within which it can action. If a previous transaction with matching values occurred within
            the window, any subsequent transaction will result in a T001 result.
            
            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
            
             `1` for an enforced policy. Transactions that are enforced will be checked for duplication within the duplication window.
            
             `2` to bypass. Transactions that are bypassed will not be checked for duplication within the duplication window.
            
             `3` to ignore. Transactions that are ignored will have the same affect as bypass.
        expmonth: 
          type: integer
          format: int32
          example: 9
          minimum: 1
          maximum: 12
          description: |
            The month of expiry of the card. The month value should be a numerical value between 1 and 12.
        expyear: 
          type: integer
          format: int32
          example: 2024
          minimum: 2000
          maximum: 2100
          description: |
            The year of expiry of the card.
        external_mpi: 
          $ref: '#/components/schemas/ExternalMPI'
          x-business-extension: 3DSv1 MPI
          x-description: If an external 3DSv1 MPI is used for authentication, values provided can be supplied in this element.
        identifier: 
          type: string
          minLength: 4
          maxLength: 50
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          description: |
            The identifier of the transaction to process. The value should be a valid reference and may be used to perform
             post processing actions and to aid in reconciliation of transactions.
            
            The value should be a valid printable string with ASCII character ranges from 0x32 to 0x127.
            
            The identifier is recommended to be distinct for each transaction such as a [random unique identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier)
            this will aid in ensuring each transaction is identifiable.
            
            When transactions are processed they are also checked for duplicate requests. Changing the identifier on a subsequent
            request will ensure that a transaction is considered as different.
        match_avsa: 
          type: string
          description: |
            A policy value which determines whether an AVS address policy is enforced, bypassed or ignored.
            
            Values are
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
            
             `1` for an enforced policy. Transactions that are enforced will be rejected if the AVS address numeric value does not match.
            
             `2` to bypass. Transactions that are bypassed will be allowed through even if the address did not match.
            
             `3` to ignore. Transactions that are ignored will bypass the result and not send address numeric details for authorisation.
        mcc6012: 
          $ref: '#/components/schemas/MCC6012'
          x-business-extension: MCC6012
          x-description: If the merchant is MCC coded as 6012, additional values are required for authorisation.
        merchantid: 
          type: integer
          format: int32
          example: 11223344
          description: Identifies the merchant account to perform processing for.
        ship_to: 
          $ref: '#/components/schemas/ContactDetails'
          x-description: Shipping details of the card holder making the payment. These details may be used for 3DS and for future referencing of the transaction.
        threedsecure: 
          $ref: '#/components/schemas/ThreeDSecure'
          x-description: |
            ThreeDSecure element, providing values to enable full 3DS processing flows.
        trans_info: 
          type: string
          maxLength: 50
          description: Further information that can be added to the transaction will display in reporting. Can be used for flexible values such as operator id.
        trans_type: 
          type: string
          maxLength: 1
          description: The type of transaction being submitted. Normally this value is not required and your account manager may request that you set this field.
    ListMerchantsResponse: 
      type: object
      properties: 
        client_name: 
          type: string
          description: The client name that was requested.
        clientid: 
          type: string
          minLength: 3
          maxLength: 10
          example: PC12345
          description: The client id requested.
        merchants: 
          type: array
          items:
            $ref: '#/components/schemas/Merchant'
    AccountCreate: 
      type: object
      required: 
        - account_id
      properties: 
        account_id: 
          type: string
          minLength: 5
          maxLength: 50
          example: aaabbb-cccddd-eee
          description: |
            A card holder account id used for uniquely identifying the account. This value will be used for future
            referencing of the account oand to link your system to this API. This value is immutable and
            never changes.
        contact: 
          $ref: '#/components/schemas/ContactDetails'
          x-description: |
            Contact details for a card holder account.
    CardStatus: 
      type: object
      properties: 
        card_status: 
          type: string
          description: The status of the card to set, valid values are ACTIVE or INACTIVE.
        default: 
          type: boolean
          description: Defines if the card is set as the default.
    ContactDetails: 
      type: object
      properties: 
        address1: 
          type: string
          maxLength: 50
          example: 79 Parliament St
          description: The first line of the address for the card holder.
        address2: 
          type: string
          maxLength: 50
          example: Westminster
          description: The second line of the address for the card holder.
        address3: 
          type: string
          maxLength: 50
          example: 
          description: The third line of the address for the card holder.
        area: 
          type: string
          maxLength: 50
          example: London
          description: The area such as city, department, parish for the card holder.
        company: 
          type: string
          example: Acme Ltd
          description: The company name for the card holder if the contact is a corporate contact.
        country: 
          type: string
          minLength: 2
          maxLength: 2
          example: GB
          description: |
            The country code in ISO 3166 format. The country value may be used for fraud analysis and for
              acceptance of the transaction.
        email: 
          type: string
          example: card.holder@citypay.com
          description: An email address for the card holder which may be used for correspondence.
        firstname: 
          type: string
          example: John
          description: The first name  of the card holder.
        lastname: 
          type: string
          example: Smith
          description: The last name or surname of the card holder.
        mobile_no: 
          type: string
          maxLength: 20
          example: +447790123456
          description: A mobile number for the card holder the mobile number is often required by delivery companies to ensure they are able to be in contact when required.
        postcode: 
          type: string
          maxLength: 10
          example: L1 789
          description: The postcode or zip code of the address which may be used for fraud analysis.
        telephone_no: 
          type: string
          maxLength: 20
          example: +442030123456
          description: A telephone number for the card holder.
        title: 
          type: string
          example: Mr
          description: A title for the card holder such as Mr, Mrs, Ms, M. Mme. etc.
    Exists: 
      type: object
      required: 
        - exists
      properties: 
        active: 
          type: boolean
          example: true
          description: Boolean value whether the entity is active.
        exists: 
          type: boolean
          example: true
          description: Boolean value whether the entity exists.
        last_modified: 
          type: date-time
          example: 2020-01-02T18:32:28Z
          description: The last modified date of the entity.
    VoidRequest: 
      type: object
      required: 
        - merchantid
      properties: 
        identifier: 
          type: string
          minLength: 4
          maxLength: 50
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          description: The identifier of the transaction to void. If an empty value is supplied then a `trans_no` value must be supplied.
        merchantid: 
          type: integer
          format: int32
          example: 11223344
          description: Identifies the merchant account to perform the void for.
        transno: 
          type: integer
          format: int32
          example: 78416
          description: The transaction number of the transaction to look up and void. If an empty value is supplied then an identifier value must be supplied.
    AccountStatus: 
      type: object
      properties: 
        status: 
          type: string
          description: The status of the account to set, valid values are ACTIVE or DISABLED.
    ThreeDSecure: 
      type: object
      properties: 
        accept_headers: 
          type: string
          example: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
          description: |
            Required for 3DSv1. Optional if the `cp_bx` value is provided otherwise required for 3Dv2 processing operating in
            browser authentication mode.
            
            The `cp_bx` value will override any value supplied to this field.
            
            The content of the HTTP accept header as sent to the merchant from the cardholder's user agent.
            
            This value will be validated by the ACS when the card holder authenticates themselves to verify that
            no intermediary is performing this action. Required for 3DSv1.
        cp_bx: 
          type: string
          example: FjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAx...
          description: |
            Required for 3DSv2.
            
            Browser extension value produced by the citypay.js `bx` function. See [https://sandbox.citypay.com/3dsv2/bx](https://sandbox.citypay.com/3dsv2/bx) for
             details.
        downgrade1: 
          type: boolean
          description: |
            Where a merchant is configured for 3DSv2, setting this option will attempt to downgrade the transaction to
             3DSv1.
        merchant_termurl: 
          type: string
          example: https://mysite.com/acs/return
          description: |
            Required for 3DSv1 and 3Dv2 processing.
            
            A controller URL for 3D-Secure processing that any response from an authentication request or
            challenge request should be sent to.
            
            The controller should forward on the response from the URL back via this API for subsequent processing.
            Required if 3DSv1 or 3DSv2 is required.
        tds_policy: 
          type: string
          description: |
            A policy value which determines whether ThreeDSecure is enforced or bypassed. Note that this will only work for
            e-commerce transactions and accounts that have 3DSecure enabled and fully registered with Visa, MasterCard or
            American Express. It is useful when transactions may be wanted to bypass processing rules.
            
            Note that this may affect the liability shift of transactions and may occur a higher fee with the acquiring bank.
            
            Values are
            
             `0` for the default policy (default value if not supplied). Your default values are determined by your account manager on setup of the account.
            
             `1` for an enforced policy. Transactions will be enabled for 3DS processing
            
             `2` to bypass. Transactions that are bypassed will switch off 3DS processing.
        user_agent: 
          type: string
          example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36
          description: |
            Required for 3DSv1. Optional if the `cp_bx` value is provided otherwise required 3Dv2 processing operating in
            browser authentication mode.
            
            The `cp_bx` value will override any value supplied to this field.
            
            The content of the HTTP user-agent header as sent to the merchant from the cardholder's user agent.
            
            This value will be validated by the ACS when the card holder authenticates themselves to verify that
            no intermediary is performing this action. Required for 3DSv1.
    PaResAuthRequest: 
      type: object
      required: 
        - md
        - pares
      properties: 
        md: 
          type: string
          description: |
            The Merchant Data (MD) which is a unique ID to reference the authentication session.
            
            This value will be created by CityPay when required. When responding from the ACS,
            this value will be returned by the ACS.
        pares: 
          type: string
          format: base64
          example: v66ycfSp8jNlvy7PkHbx44NEt3vox90+vZ/7Ll05Vid/jPfQn8adw+4D/vRDUGT19kndW97Hfirb...
          description: |
            The Payer Authentication Response packet which is returned by the ACS containing the
             response of the authentication session including verification values. The response
             is a base64 encoded packet and should be forwarded to CityPay untouched.
    AirlineAdvice: 
      type: object
      required: 
        - carrier_name
        - number_in_party
        - segment1
        - ticket_issue_city
        - ticket_issue_date
        - ticket_issue_name
        - ticket_no
        - transaction_type
      properties: 
        carrier_name: 
          type: string
          maxLength: 25
          example: EG Air
          description: The name of the airline carrier that generated the tickets for airline travel.
        conjunction_ticket_indicator: 
          type: boolean
          example: false
          description: |
            true if a conjunction ticket (with additional coupons) was issued for an itinerary
            with more than four segments. Defaults to false.
        eticket_indicator: 
          type: boolean
          example: true
          description: The Electronic Ticket Indicator, a code that indicates if an electronic ticket was issued.  Defaults to true.
        no_air_segments: 
          type: integer
          format: int32
          example: 2
          minimum: 0
          maximum: 4
          description: |
            A value that indicates the number of air travel segments included on this ticket.
            
            Valid entries include the numerals “0” through “4”. Required only if the transaction type is TKT or EXC.
        number_in_party: 
          type: integer
          format: int32
          example: 2
          description: The number of people in the party.
        original_ticket_no: 
          type: string
          maxLength: 14
          description: Required if transaction type is EXC.
        passenger_name: 
          type: string
          maxLength: 25
          example: NE Person
          description: The name of the passenger when the traveller is not the card member that purchased the ticket. Required only if the transaction type is TKT or EXC.
        segment1: 
          $ref: '#/components/schemas/AirlineSegment'
          x-description: Segment 1 of airline data defining the outward leg.
        segment2: 
          $ref: '#/components/schemas/AirlineSegment'
          x-description: Segment 2 of airline data. If a return flight or stop-over the segment will be populated.
        segment3: 
          $ref: '#/components/schemas/AirlineSegment'
          x-description: Segment 3 of airline data if defined.
        segment4: 
          $ref: '#/components/schemas/AirlineSegment'
          x-description: Segment 4 of airline data if defined.
        ticket_issue_city: 
          type: string
          maxLength: 18
          example: London
          description: The name of the city town or village where the transaction took place.
        ticket_issue_date: 
          type: string
          format: date
          maxLength: 10
          example: 2020-08-01
          description: The date the ticket was issued in ISO Date format (yyyy-MM-dd).
        ticket_issue_name: 
          type: string
          maxLength: 26
          example: Issue Name
          description: The name of the agency generating the ticket.
        ticket_no: 
          type: string
          maxLength: 14
          example: A112233
          description: |
            This must be a valid ticket number, i.e. numeric (the first 3 digits must represent the valid IATA plate carrier code).
            The final check digit should be validated prior to submission. On credit charges, this field should contain the
            number of the original ticket, and not of a replacement.
        transaction_type: 
          type: string
          minLength: 3
          maxLength: 3
          example: TKT
          description: |
            This field contains the Transaction Type code assigned to this transaction. Valid codes include:
            
             - `TKT` = Ticket Purchase
            
             - `REF` = Refund
            
             - `EXC` = Exchange Ticket
            
             - `MSC` = Miscellaneous (non-Ticket Purchase- and non-Exchange Ticket-related transactions only).
    RegisterCard: 
      type: object
      required: 
        - cardnumber
        - expmonth
        - expyear
      properties: 
        cardnumber: 
          type: string
          minLength: 12
          maxLength: 22
          example: 4000 0000 0000 0002
          description: The primary number of the card.
        default: 
          type: boolean
          description: Determines whether the card should be the new default card.
        expmonth: 
          type: integer
          format: int32
          example: 9
          minimum: 1
          maximum: 12
          description: The expiry month of the card.
        expyear: 
          type: integer
          format: int32
          example: 2024
          minimum: 2000
          maximum: 2100
          description: The expiry year of the card.
    Ping: 
      type: object
      properties: 
        identifier: 
          type: string
          minLength: 4
          maxLength: 50
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          description: An identifier of the ping request which will be returned in the response.
    CaptureRequest: 
      type: object
      required: 
        - merchantid
      properties: 
        airline_data: 
          $ref: '#/components/schemas/AirlineAdvice'
          x-business-extension: Airline
          x-description: Additional advice to be applied for the capture request.
        amount: 
          type: integer
          format: int32
          minLength: 1
          maxLength: 12
          example: 3600
          description: |
            The completion amount provided in the lowest unit of currency for the specific currency of the merchant,
            with a variable length to a maximum of 12 digits. No decimal points to be included. For example with
            GBP 75.45 use the value 7545. Please check that you do not supply divisional characters such as 1,024 in the
            request which may be caused by some number formatters.
            
            If no amount is supplied, the original processing amount is used.
        identifier: 
          type: string
          minLength: 4
          maxLength: 50
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          description: The identifier of the transaction to capture. If an empty value is supplied then a `trans_no` value must be supplied.
        merchantid: 
          type: integer
          format: int32
          example: 11223344
          description: Identifies the merchant account to perform the capture for.
        transno: 
          type: integer
          format: int32
          example: 78416
          description: The transaction number of the transaction to look up and capture. If an empty value is supplied then an identifier value must be supplied.
    Merchant: 
      type: object
      properties: 
        currency: 
          type: string
          example: GBP
          description: The currency of the merchant.
        merchantid: 
          type: integer
          format: int32
          example: 11223344
          description: The merchant id which uniquely identifies the merchant account.
        name: 
          type: string
          example: Merchant 1
          description: The name of the merchant.
        status: 
          type: string
          example: A
          description: The status of the account.
        status_label: 
          type: string
          example: Active
          description: The status label of the account.
  

  securitySchemes:
    cp-api-key:
      name: cp-api-key
      type: apiKey
      description: |
        The `cp-api-key` authentication header is required for all payment processing access.
         All calls using this key will be validated against white listed IP addressing
         and calls are scrutinised by the CityPay application firewall for security protection
         and attack mitigation.

         A key has been designed to:
         - be temporal and time based. The key rotates frequently to protect against replay attacks and to ensure a
           computation derives your client details from the request
         - to remain secret, the key value is youur access permission to process transactions and
           although we have preventative measures to protect the key, undue exposure is not desirable
         - to allow processing against multiple merchant accounts that belong to your CityPay account.
         - to use a HTTP header value to protect undue logging mechanisms from logging data packet values and
           logically seperates authentication concerns from the body of data.
      in: header

security:
  - cp-api-key: []


# EOF