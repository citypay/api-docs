openapi: 3.0.0

################################################################################
#                              API Information                                 #
################################################################################
info:
  version: 6.0.0.BETA
  title: CityPay Payment API
  description: |

    This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It
    provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing,
    3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and
    Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.


    ## Compliance and Security
    <aside class="notice">
      Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely
      and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including:
    </aside>

    * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at
      lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments
      as part of our compliance program.
    * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or
      primary access number (PAN)
    * The application must not display the full card number on receipts, it is recommended to mask the PAN
      and show the last 4 digits. The API will return this for you for ease of receipt creation
    * If you are developing a website, you will be required to perform regular scans on the network where you host the
      application to meet your compliance obligations
    * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information
      is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/)
    * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP
      address. Our application firewalls analyse data that may be an attempt to break a large number of security common
      security vulnerabilities.


  contact:
    name: CityPay Support
    url: https://citypay.com/customer-centre/technical-support.html
    email: support@citypay.com

# during dev, should point to your local machine
servers:
- url: https://api.citypay.com
  description: Production processing endpoint
- url: https://sandbox.citypay.com
  description: Testing service returning test results for all transactions


#--------------------------------------------------------------------------------
#                                    Paths                                     
#--------------------------------------------------------------------------------

paths:
  /capture: 
    post: 
      summary: Capture API
      tags: 
        - PaymentProcessing
      operationId: capture
      description: |
        _The capture process only applies to transactions which have been pre-authorised only._ 
        
        The capture process will ensure
        that a transaction will now settle. It is expected that a capture call will be provided within 3 days or
        a maximum of 7 days.
        
        A capture request is provided to confirm that you wish the transaction to be settled. This request can
        contain a final amount for the transaction which is different to the original authorisation amount. This
        may be useful in a delayed system process such as waiting for stock to be ordered, confirmed, or services
        provided before the final cost is known.
        
        When a transaction is completed, a new authorisation code may be created and a new confirmation
        can be sent online to the acquiring bank.
        
        Once the transaction has been processed. A standard [`Acknowledgement`](#acknowledgement) will be returned,
        outlining the result of the transaction. On a successful completion process, the transaction will
        be available for the settlement and completed at the end of the day.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/CaptureRequest'
            examples: 
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'capture-example1.json'
              example3: 
                summary: Capture call for a merchant with identifier and airline data once a ticket has been issued
                externalValue: 'capture-example3.json'
              example2: 
                summary: Basic capture call for a merchant with a transno and final amount
                externalValue: 'capture-example2.json'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/CaptureRequest'
            examples: 
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'capture-example1.xml'
              example3: 
                summary: Capture call for a merchant with identifier and airline data once a ticket has been issued
                externalValue: 'capture-example3.xml'
              example2: 
                summary: Basic capture call for a merchant with a transno and final amount
                externalValue: 'capture-example2.xml'
      responses: 
        200: 
          description: A result of the capture request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
  /void: 
    post: 
      summary: Void API
      tags: 
        - PaymentProcessing
      operationId: void
      description: |
        _The void process generally applies to transactions which have been pre-authorised only however voids can occur 
        on the same day if performed before batching and settlement._ 
        
        The void process will ensure that a transaction will now settle. It is expected that a void call will be 
        provided on the same day before batching and settlement or within 3 days or within a maximum of 7 days.
        
        Once the transaction has been processed as a void, an [`Acknowledgement`](#acknowledgement) will be returned,
        outlining the result of the transaction.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/VoidRequest'
            examples: 
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'void-example1.json'
              example2: 
                summary: Basic capture call for a merchant with a transno and final amount
                externalValue: 'void-example2.json'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/VoidRequest'
            examples: 
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'void-example1.xml'
              example2: 
                summary: Basic capture call for a merchant with a transno and final amount
                externalValue: 'void-example2.xml'
      responses: 
        200: 
          description: A result of the void request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.


#--------------------------------------------------------------------------------
#                              Components/Schemas                              
#--------------------------------------------------------------------------------

components:
  schemas:
    Acknowledgement: 
      type: object
      properties: 
        code: 
          type: string
          minLength: 3
          maxLength: 4
          example: 000
          description: A response code providing a result of the process.
        message: 
          type: string
          example: Approved 044332
          description: A response message providing a description of the result of the process.
        context: 
          type: string
          example: aspiu352908ns47n343598bads
          description: A context id of the process used for referencing transactions through support.
    AirlineSegment: 
      type: object
      required: 
        - departure-date
        - arrival-location-code
        - carrier-code
        - class-service-code
        - flight-number
      properties: 
        stop-over-indicator: 
          type: string
          maxLength: 1
          example: 1
          description: O = Stopover allowed, X = Stopover not allowed.
        departure-location-code: 
          type: string
          maxLength: 3
          example: JER
          description: |
            A standard airline routing code (airport code or location identifier) applicable to the
            departure portion of this segment.
        departure-date: 
          type: string
          format: date
          example: 2020-08-01
          description: The Departure Date for the travel segment in ISO Date Format (yyyy-MM-dd).
        arrival-location-code: 
          type: string
          maxLength: 3
          example: SOU
          description: |
            A standard airline routing code (airport code or location identifier) applicable to the
            arrival portion of this segment.
        carrier-code: 
          type: string
          maxLength: 2
          example: ZZ
          description: |
            This field contains the two character airline designator code (air carrier code or airline code) that
            corresponds to the airline carrier applicable for up to four flight segments of this trip itinerary.
        class-service-code: 
          type: string
          maxLength: 2
          example: CC
          description: |
            This field contains a code that corresponds to the fare class (A, B, C, D, Premium, Discounted, etc.)
            within the overall class of service (e.g., First Class, Business, Economy) applicable to this travel segment,
            as specified in the IATA Standard Code allocation table.
        flight-number: 
          type: string
          maxLength: 4
          example: 772
          description: This field contains the carrier-assigned Flight Number for this travel segment.
        segment-fare: 
          type: integer
          format: int32
          example: 7500
          description: This field contains the total Fare for this travel segment.
    VoidRequest: 
      type: object
      required: 
        - merchantid
      properties: 
        merchantid: 
          type: integer
          format: int32
          example: 11223344
          description: Identifies the merchant account to perform the void for.
        identifier: 
          type: string
          minLength: 4
          maxLength: 50
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          description: The identifier of the transaction to void. If an empty value is supplied then a `trans_no` value must be supplied.
        transno: 
          type: integer
          format: int32
          example: 78416
          description: The transaction number of the transaction to look up and void. If an empty value is supplied then an identifier value must be supplied.
    AirlineAdvice: 
      type: object
      required: 
        - carrier-name
        - transaction-type
        - ticketno
        - ticket-issue-name
        - ticket-issue-city
        - ticket-issue-date
        - number-in-party
        - segment1
      properties: 
        carrier-name: 
          type: string
          maxLength: 25
          example: EXample Air
          description: The name of the airline carrier that generated the tickets for airline travel.
        transaction-type: 
          type: string
          minLength: 3
          maxLength: 3
          example: TKT
          description: |
            This field contains the Transaction Type code assigned to this transaction. Valid codes include:
            
             - `TKT` = Ticket Purchase
             - `REF` = Refund
             - `EXC` = Exchange Ticket
             - `MSC` = Miscellaneous (non-Ticket Purchase- and non-Exchange Ticket-related transactions only).
        ticketno: 
          type: string
          maxLength: 14
          example: A112233
          description: |
            This must be a valid ticket number, i.e. numeric (the first 3 digits must represent the valid IATA plate carrier code).
            The final check digit should be validated prior to submission. On credit charges, this field should contain the
            number of the original ticket, and not of a replacement.
        ticket-issue-name: 
          type: string
          maxLength: 26
          example: Issue Name
          description: The name of the agency generating the ticket.
        ticket-issue-city: 
          type: string
          maxLength: 18
          example: London
          description: The name of the city town or village where the transaction took place.
        ticket-issue-date: 
          type: string
          format: date
          maxLength: 10
          example: 2020-08-01
          description: The date the ticket was issued in ISO Date format (yyyy-MM-dd).
        number-in-party: 
          type: integer
          format: int32
          example: 2
          description: The number of people in the party.
        passenger-name: 
          type: string
          maxLength: 25
          example: NE Person
          description: The name of the passenger when the traveller is not the card member that purchased the ticket. Required only if the transaction type is TKT or EXC.
        conjunction-ticket-indicator: 
          type: boolean
          example: false
          description: |
            true if a conjunction ticket (with additional coupons) was issued for an itinerary
            with more than four segments. Defaults to false.
        eticket-indicator: 
          type: boolean
          example: true
          description: The Electronic Ticket Indicator, a code that indicates if an electronic ticket was issued.  Defaults to true.
        no-air-segments: 
          type: integer
          format: int32
          example: 2
          minimum: 0
          maximum: 4
          description: |
            A value that indicates the number of air travel segments included on this ticket.
            Valid entries include the numerals “0” through “4”. Required only if the transaction type is TKT or EXC.
        original-ticket-no: 
          type: string
          maxLength: 14
          description: Required if transaction type is EXC.
        segment1: 
          $ref: '#/components/schemas/AirlineSegment'
        segment2: 
          $ref: '#/components/schemas/AirlineSegment'
        segment3: 
          $ref: '#/components/schemas/AirlineSegment'
        segment4: 
          $ref: '#/components/schemas/AirlineSegment'
    CaptureRequest: 
      type: object
      required: 
        - merchantid
      properties: 
        merchantid: 
          type: integer
          format: int32
          example: 11223344
          description: Identifies the merchant account to perform the capture for.
        identifier: 
          type: string
          minLength: 4
          maxLength: 50
          example: 95b857a1-5955-4b86-963c-5a6dbfc4fb95
          description: The identifier of the transaction to capture. If an empty value is supplied then a `trans_no` value must be supplied.
        transno: 
          type: integer
          format: int32
          example: 78416
          description: The transaction number of the transaction to look up and capture. If an empty value is supplied then an identifier value must be supplied.
        amount: 
          type: integer
          format: int32
          minLength: 1
          maxLength: 12
          example: 3600
          description: |
            The completion amount provided in the lowest unit of currency for the specific currency of the merchant,
            with a variable length to a maximum of 12 digits. No decimal points to be included. For example with
            GBP 75.45 use the value 7545. Please check that you do not supply divisional characters such as 1,024 in the
            request which may be caused by some number formatters.
            If no amount is supplied, the original processing amount is used.
        airline-data: 
          $ref: '#/components/schemas/AirlineAdvice'
  

  securitySchemes:
    cp-api-key:
      name: CityPay API Authentication
      type: apiKey
      description: |
        The `cp-api-key` authentication header is required for all payment processing access.
         All calls using this key will be validated against white list IP addressing based
         and calls are scrutinised by the CityPay application firewall for security protection
         and attack mitigation. The key should remain secret and may allow processing against multiple
         merchant accounts that belong to your client account.

         A header key is used to protect undue logging mechanisms from logging data packet values and
         logically seperates authentication concerns from the body of data.
      in: header

security:
  - cp-api-key: []


# EOF