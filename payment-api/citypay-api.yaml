openapi: 3.0.0

################################################################################
#                              API Information                                 #
################################################################################
info:
  version: 6.2.14
  title: CityPay Payment API
  description: |

    This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It
    provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing,
    3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and
    Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.

    ## Compliance and Security
    <aside class="notice">
      Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely
      and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including:
    </aside>

    * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at
      lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments
      as part of our compliance program.
    * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or
      primary access number (PAN)
    * The application must not display the full card number on receipts, it is recommended to mask the PAN
      and show the last 4 digits. The API will return this for you for ease of receipt creation
    * If you are developing a website, you will be required to perform regular scans on the network where you host the
      application to meet your compliance obligations
    * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information
      is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/)
    * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP
      address. Our application firewalls analyse data that may be an attempt to break a large number of security common
      security vulnerabilities.


  contact:
    name: CityPay Support
    url: https://citypay.com/customer-centre/technical-support.html
    email: support@citypay.com

# during dev, should point to your local machine
servers:
- url: https://api.citypay.com/v6
  description: Production processing endpoint
- url: https://sandbox.citypay.com/v6
  description: Testing service returning test results for all transactions

tags:
  - name: Batch Processing
    description: |
      Batch processing uses the Batch and Instalment Service (BIS) which allows for transaction processing against cardholder 
      accounts using a dynamic batch file. For merchants who process on schedules and dynamic amounts, the service allows for 
      the presentation of cardholder account references and transaction requirements to run as a scheduled batch.
  - name: Card Holder Account
    description: |
      A cardholder account models a cardholder and can register 1 or more cards for tokenised charging. 
      
      The account offers a credential on file option to the CityPay gateway allowing for both cardholder initiated and 
      merchant initiated transaction processing.
      
      This can include unscheduled or scheduled transactions that can be requested through this API and include batch 
      processing options.
  - name: Operational
    description: Operations that are for operational purposes only such as checking connectivity to the API.
  - name: Payment Processing
    description: |
      The Payment Processing API offers standard and enhanced payment processing for MOTO, e-commerce
       and continuous authority transactions that include fraud and risk checking, 3D-Secure flows 
       and payment querying.

#--------------------------------------------------------------------------------
#                                    Paths                                     
#--------------------------------------------------------------------------------

paths:
  /account/{accountid}/register: 
    post: 
      summary: Card Registration
      tags: 
        - Card Holder Account
      operationId: AccountCardRegisterRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Allows for a card to be registered for the account. The card will be added for future 
        processing and will be available as a tokenised value for future processing.
        
        The card will be validated for
        
        0. Being a valid card number (luhn check)
        0. Having a valid expiry date
        0. Being a valid bin value.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/RegisterCard'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/RegisterCard'
      responses: 
        200: 
          description: A successfully registered card provides a reload of the account including the new card.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /acl/check: 
    post: 
      summary: ACL Check Request
      tags: 
        - Operational
      operationId: AclCheckRequest
      description: |
        Allows the checking of IP addresses against configured ACLs. Requests can perform a lookup of addresses in subnets and
        services such as AWS or Azure to check that those addresses are listed in the ACLs.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/AclCheckRequest'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/AclCheckRequest'
      responses: 
        200: 
          description: Response to the ACL Check request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/AclCheckResponseModel'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/AclCheckResponseModel'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /account/{accountid}: 
    get: 
      summary: Account Retrieval
      tags: 
        - Card Holder Account
      operationId: AccountRetrieveRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Allows for the retrieval of a card holder account for the given `id`. Should duplicate accounts exist
        for the same `id`, the first account created with that `id` will be returned.
        
        The account can be used for tokenisation processing by listing all cards assigned to the account.
        The returned cards will include all `active`, `inactive` and `expired` cards. This can be used to 
        enable a card holder to view their wallet and make constructive choices on which card to use.
      responses: 
        200: 
          description: A card holder account that matches the account id provided in the request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
    delete: 
      summary: Account Deletion
      tags: 
        - Card Holder Account
      operationId: AccountDeleteRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further
        transactions will be alowed to be processed or actioned against this account.
      responses: 
        200: 
          description: An acknowledgment code of `001` that the card holder account has been marked for deletion.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /ping: 
    post: 
      summary: Ping Request
      tags: 
        - Operational
      operationId: PingRequest
      description: |
        A ping request which performs a connection and authentication test to the CityPay API server. The request
        will return a standard Acknowledgement with a response code `044` to signify a successful
        ping.
        
        The ping call is useful to confirm that you will be able to access 
        the API from behind any firewalls and that the permission
        model is granting access from your source.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/Ping'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/Ping'
      responses: 
        200: 
          description: A result of the ping request, returning on 044 response code on successful receipt of the ping request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /capture: 
    post: 
      summary: Capture
      tags: 
        - Payment Processing
      operationId: CaptureRequest
      description: |
        _The capture process only applies to transactions which have been pre-authorised only._ 
        
        The capture process will ensure
        that a transaction will now settle. It is expected that a capture call will be provided within 3 days or
        a maximum of 7 days.
        
        A capture request is provided to confirm that you wish the transaction to be settled. This request can
        contain a final amount for the transaction which is different to the original authorisation amount. This
        may be useful in a delayed system process such as waiting for stock to be ordered, confirmed, or services
        provided before the final cost is known.
        
        When a transaction is completed, a new authorisation code may be created and a new confirmation
        can be sent online to the acquiring bank.
        
        Once the transaction has been processed. A standard [`Acknowledgement`](#acknowledgement) will be returned,
        outlining the result of the transaction. On a successful completion process, the transaction will
        be available for the settlement and completed at the end of the day.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/CaptureRequest'
            examples: 
              example3: 
                summary: Capture call for a merchant with identifier and airline data once a ticket has been issued
                externalValue: 'CaptureRequest-example3.json'
              example2: 
                summary: Basic capture call for a merchant with a transno and final amount
                externalValue: 'CaptureRequest-example2.json'
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'CaptureRequest-example1.json'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/CaptureRequest'
            examples: 
              example3: 
                summary: Capture call for a merchant with identifier and airline data once a ticket has been issued
                externalValue: 'CaptureRequest-example3.xml'
              example2: 
                summary: Basic capture call for a merchant with a transno and final amount
                externalValue: 'CaptureRequest-example2.xml'
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'CaptureRequest-example1.xml'
      responses: 
        200: 
          description: A result and acknowledgement of the capture request. The response will return a `000/001` response on a successful capture otherwise an error code response explaining the error.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /batch/process: 
    post: 
      summary: Batch Process Request
      tags: 
        - Batch Processing
      operationId: BatchProcessRequest
      description: |
        A batch process request is used to start the batch process workflow by uploading batch
        data and initialising a new batch for processing. Once validated the batch will be queued
        for processing and further updates can be received by a subsequent call to retrieve the batch
        status.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/ProcessBatchRequest'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/ProcessBatchRequest'
      responses: 
        200: 
          description: Request to process a batch provided in the request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/ProcessBatchResponse'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/ProcessBatchResponse'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /account-exists/{accountid}: 
    get: 
      summary: Account Exists
      tags: 
        - Card Holder Account
      operationId: AccountExistsRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Checks that an account exists and is active by providing the account id as a url parameter 
        Checks that an account exists and is active by providing the account id as a url parameter.
      responses: 
        200: 
          description: A response model determining whether the account exists, if exists is true, a last modified date of the account is also provided.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Exists'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Exists'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /bin: 
    post: 
      summary: Bin Lookup
      tags: 
        - Payment Processing
      operationId: BinRangeLookupRequest
      description: |
        A bin range lookup service can be used to check what a card is, as seen by the gateway. Each card number's 
        leading digits help to identify who
        
        0. the card scheme is such as Visa, MasterCard or American Express 
        1. the issuer of the card, such as the bank
        2. it's country of origin
        3. it's currency of origin
        
        Our gateway has 450 thousand possible bin ranges and uses a number of algorithms to determine the likelihood of the bin
        data. The request requires a bin value of between 6 and 12 digits. The more digits provided may ensure a more accurate
        result.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/BinLookup'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/BinLookup'
      responses: 
        200: 
          description: A result of the bin lookup request returning a bin object determined by the gateway service.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Bin'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Bin'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /account/{accountid}/contact: 
    post: 
      summary: Contact Details Update
      tags: 
        - Card Holder Account
      operationId: AccountChangeContactRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: Allows for the ability to change the contact details for an account.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/ContactDetails'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/ContactDetails'
      responses: 
        200: 
          description: A revised account with the new details set.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /account/{accountid}/card/{cardId}/status: 
    post: 
      summary: Card Status
      tags: 
        - Card Holder Account
      operationId: AccountCardStatusRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
        - name: cardId
          in: path
          required: true
          description: The id of the card that is presented by a call to retrieve a card holder account.
          schema: 
            type: string
      description: |
        Updates the status of a card for processing. The following values are available
        
        | Status | Description | 
        |--------|-------------|
        | Active | The card is active for processing and can be used for charging against with a valid token |
        | Inactive | The card is inactive for processing and cannot be used for processing, it will require reactivation before being used to charge |
        | Expired | The card has expired either due to the expiry date no longer being valid or due to a replacement card being issued |
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/CardStatus'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/CardStatus'
      responses: 
        200: 
          description: </br>Acknowledges the card status has changed, returning a response code of `001` for a valid change or `000` for a non valid change.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /account/create: 
    post: 
      summary: Account Create
      tags: 
        - Card Holder Account
      operationId: AccountCreate
      description: Creates a new card holder account and initialises the account ready for adding cards.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/AccountCreate'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/AccountCreate'
      responses: 
        200: 
          description: Provides an initialised account.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /refund: 
    post: 
      summary: Refund
      tags: 
        - Payment Processing
      operationId: RefundRequest
      description: |
        A refund request which allows for the refunding of a previous transaction up 
        and to the amount of the original sale. A refund will be performed against the 
        original card used to process the transaction.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/RefundRequest'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/RefundRequest'
      responses: 
        200: 
          description: A result of the refund of sale processing.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /void: 
    post: 
      summary: Void
      tags: 
        - Payment Processing
      operationId: VoidRequest
      description: |
        _The void process generally applies to transactions which have been pre-authorised only however voids can occur 
        on the same day if performed before batching and settlement._ 
        
        The void process will ensure that a transaction will now settle. It is expected that a void call will be 
        provided on the same day before batching and settlement or within 3 days or within a maximum of 7 days.
        
        Once the transaction has been processed as a void, an [`Acknowledgement`](#acknowledgement) will be returned,
        outlining the result of the transaction.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/VoidRequest'
            examples: 
              example2: 
                summary: Basic capture call for a merchant with a transno and final amount
                externalValue: 'VoidRequest-example2.json'
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'VoidRequest-example1.json'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/VoidRequest'
            examples: 
              example2: 
                summary: Basic capture call for a merchant with a transno and final amount
                externalValue: 'VoidRequest-example2.xml'
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'VoidRequest-example1.xml'
      responses: 
        200: 
          description: </br>A result and acknowledgement of the void request, returning an `080/003` response code on successful void/cancellation of the transaction.</br></br>If an error occurs an error code will be returned explaining the failure.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /account/{accountid}/status: 
    post: 
      summary: Account Status
      tags: 
        - Card Holder Account
      operationId: AccountStatusRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Updates the status of an account. An account can have the following statuses applied
        
        | Status | Description |
        |--------|-------------|
        | Active | The account is active for processing |
        | Disabled | The account has been disabled and cannot be used for processing. The account will require reactivation to continue procesing |
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/AccountStatus'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/AccountStatus'
      responses: 
        200: 
          description: An acknowledgment that the card holder account status has been updated.</br></br>A response code of `001` is returned if the request was accepted or no change required.</br></br>A response code of `000` is returned if the request contains invalid data.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /account/{accountid}/card/{cardId}: 
    delete: 
      summary: Card Deletion
      tags: 
        - Card Holder Account
      operationId: AccountCardDeleteRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
        - name: cardId
          in: path
          required: true
          description: The id of the card that is presented by a call to retrieve a card holder account.
          schema: 
            type: string
      description: |
        Deletes a card from the account. The card will be marked for deletion before a subsequent
        purge will clear the card permanently.
      responses: 
        200: 
          description: Acknowledges the card has been requested for deletion. A response code of `001` is returned if the account is available for deletion otherwise an error code is returned.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /cres: 
    post: 
      summary: CRes
      tags: 
        - Payment Processing
      operationId: CResRequest
      description: |
        The CRes request performs authorisation processing once a challenge request has been completed
        with an Authentication Server (ACS). This challenge response contains confirmation that will
        allow the API systems to return an authorisation response based on the result. Our systems will 
        know out of band via an `RReq` call by the ACS to notify us if the liability shift has been issued.
        
        Any call to the CRes operation will require a previous authorisation request and cannot be called 
        on its own without a previous [request challenge](#requestchallenged) being obtained.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/CResAuthRequest'
            examples: 
              example1: 
                summary: PaRes example request
                externalValue: 'CResRequest-example1.json'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/CResAuthRequest'
            examples: 
              example1: 
                summary: PaRes example request
                externalValue: 'CResRequest-example1.xml'
      responses: 
        200: 
          description: A result of processing the 3DSv2 authorisation data.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /authorise: 
    post: 
      summary: Authorisation
      tags: 
        - Payment Processing
      operationId: AuthorisationRequest
      description: |
        An authorisation process performs a standard transaction authorisation based on the provided parameters of its request.
        The CityPay gateway will route your transaction via an Acquiring bank for subsequent authorisation to the appropriate card 
        schemes such as Visa or MasterCard.
        
        The authorisation API should be used for server environments to process transactions on demand and in realtime. 
        
        The authorisation API can be used for multiple types of transactions including E-commerce, mail order, telephone order,
        customer present (keyed), continuous authority, pre-authorisation and others. CityPay will configure your account for 
        the appropriate coding and this will perform transparently by the gateway. 
        
        Data properties that are required, may depend on the environment you are conducting payment for. Our API aims to be
         flexible enough to cater for these structures. Our integration team will aid you in providing the necessary data to 
         transact. 
         
         
        ## E-commerce workflows
         
        For E-commerce transactions requiring 3DS, the API contains a fully accredited in built mechanism to handle authentication.
        
        The Api and gateway has been accredited extensively with both Acquirers and Card Schemes to simplify the nature of these calls
        into a simple structure for authentication, preventing integrators from performing lengthy and a costly accreditations with
        Visa and MasterCard.
        
        3D-secure has been around for a number of years and aims to shift the liability of a transaction away from a merchant back
        to the card holder. A *liability shift* determines whether a card holder can charge back a transaction as unknown. Effectively
        the process asks for a card holder to authenticate the transaction prior to authorisation producing a Cardholder 
        verification value (CAVV) and ecommerce indicator (ECI) as evidence of authorisation.
        
        3DS version 1 has now been replaced by 3DS version 2 to provide secure customer authentication (SCA) in line with EU regulation.
        3DSv2 is being phased out and any accounts using version 1 of the protocol is expected to be migrated by March 2022. 
        
        Any new integrations should only consider 3DSv2 flows. 
        
        ### 3DSv2
        
        ```json
        { 
          "RequestChallenged": {
            "acsurl": "https://bank.com/3DS/ACS",
            "creq": "SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...",
            "merchantid": 12345,
            "transno": 1,
            "threedserver_trans_id": "d652d8d2-d74a-4264-a051-a7862b10d5d6"
          }               
        }
        ```
        
        ```xml
        <RequestChallenged>
          <acsurl>https://bank.com/3DS/ACS</acsurl>
          <creq>SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...</creq>
          <merchantid>12345</merchantid>
          <transno>1</transno>
          <threedserver_trans_id>d652d8d2-d74a-4264-a051-a7862b10d5d6</threedserver_trans_id>
        </RequestChallenged>
        ```
        
        CityPay support 3DS version 2.1 for Verified by Visa, MasterCard Identity Check and American Express SafeKey 2.1. Version
        2.2 is currently in development however this will be a seamless upgrade for all integrations.
        
        #### 3-D Secure - None
        
        ![3DSv2 Frctionless Flow](/images/3dsv2-no3d.png)
        
        A basic flow may involve no 3-D secure processing. This could happen if there is no ability to perform authentication.
        An enrollment check may apply an "attempted" resolution to processing. In this instance a transaction may not meet any
        liability shift. A transaction may result in a decline due to this. We are also able to prevent from transactions being
        presented for authorisation if this occurs. 
        
        #### 3-D Secure - Frictionless
        
        ![3DSv2 Frctionless Flow](/images/3dsv2-frictionless.png)
        
        E-commerce transactions supporting 3DSv2 can benefit from seamlessly authenticated transactions which may perform a 
        "frictionless" flow. This method will authenticate low risk transactions with minimal impact to a 
        standard authorisation flow. Our API simply performs this on behalf of you the developer, the merchant and cardholder.
        
        No redirection occurs and hence the flow is called frictionless and will appear as though a simple transaction 
        authorisation has occurred.
        
        #### 3-D Secure - Challenge
        
        ![3DSv2 Frctionless Flow](/images/3dsv2-challenge.png)
        
        A transaction that is deemed as higher risk my be "challenged". In this instance, the API will return a
        [request challenge](#requestchallenged) which will require your integration to forward the cardholder's browser to the 
        given [ACS url](#acsurl). This should be performed by posting the [creq](#creq) value (the challenge request value). 
        
        Once complete, the ACS will have already been in touch with our servers by sending us a result of the authentication
        known as `RReq`.
        
        To maintain session state, a parameter `threeDSSessionData` can be posted to the ACS url and will be returned alongside 
        the `CRes` value. This will ensure that any controller code will be able to isolate state between calls. This field
        is to be used by your own systems rather than ours and may be any value which can uniquely identify your cardholder's
        session. As an option, we do provide a `threedserver_trans_id` value in the `RequestChallenged` packet which can be used
        for the `threeDSSessionData` value as it is used to uniquely identify the 3D-Secure session. 
        
        A common method of maintaining state is to provide a session related query string value in the `merchant_termurl` value
        (also known as the `notificationUrl`). For example providing a url of `https://mystore.com/checkout?token=asny2348w4561..`
        could return the user directly back to their session with your environment.
        
        Once you have received a `cres` post from the ACS authentication service, this should be POSTed to the [cres](#cres) 
        endpoint to perform full authorisation processing. 
        
        Please note that the CRes returned to us is purely a mechanism of acknowledging that transactions should be committed for
        authorisation. The ACS by this point will have sent us the verification value (CAVV) to perform a liability shift. The CRes
        value will be validated for receipt of the CAVV and subsequently may return response codes illustrating this. 
        
        To forward the user to the ACS, we recommend a simple auto submit HTML form.
        
        > Simple auto submit HTML form
        
        ```html
        <html lang="en">
        	<head>
                <title>Forward to ACS</title>
        		<script type="text/javascript">
                function onLoadEvent() { 
                    document.acs.submit(); 
                }
                </script>
                <noscript>You will require JavaScript to be enabled to complete this transaction</noscript>
            </head>
            <body onload="onLoadEvent();">
                <form name="acs" action="{{ACSURL from Response}}" method="POST">
                    <input type="hidden" name="creq" value="{{CReq Packet from Response}}" />
                    <input type="hidden" name="threeDSSessionData" value="{{session-identifier}}" />
                </form>
            </body>
        </html>
        ```
        
        A full ACS test suite is available for 3DSv2 testing.
                
        ### Testing 3DSv2 Integrations
        
        The API provides a mock 3dsV2 handler which performs a number of scenarios based on the value of the CSC in the request.
        
        | CSC Value | Behaviour |
        |-----------|-----------|
        | 731       | Frictionless processing - Not authenticated |
        | 732       | Frictionless processing - Account verification count not be performed |        
        | 733       | Frictionless processing - Verification Rejected |        
        | 741       | Frictionless processing - Attempts Processing |        
        | 750       | Frictionless processing - Authenticated  |        
        | 761       | Triggers an error message |  
        | Any       | Challenge Request |       
        
        
        #### 3DSv1
        
        **Please note that 3DSv1 should now be considered as deprecated.**
        
        ```json
        { 
          "AuthenticationRequired": {
            "acsurl": "https://bank.com/3DS/ACS",
            "pareq": "SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...",
            "md": "WQgZXZlcnl0aGluZyBiZW"
          }               
        }
        ```
        
        ```xml
        <AuthenticationRequired>
         <acsurl>https://bank.com/3DS/ACS</acsurl>
         <pareq>SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...</pareq>
         <md>WQgZXZlcnl0aGluZyBiZW</md>
        </AuthenticationRequired>
        ```
        
        For E-commerce transactions requiring 3DSv1, the API contains a built in MPI which will be called to check whether the
        card is participating in 3DSv1 with Verified by Visa or MasterCard SecureCode. We only support Amex SafeKey with 3DSv2. Should the card be enrolled, a payer
        request (PAReq) value will be created and returned back as an [authentication required](#authenticationrequired) response object.
        
        Your system will need to process this authentication packet and forward the user's browser to an authentication server (ACS)
        to gain the user's authentication. Once complete, the ACS will produce a HTTP `POST` call back to the URL supplied in
        the authentication request as `merchant_termurl`. This URL should behave as a controller and handle the post data from the
        ACS and on a forked server to server HTTP request, forward this data to the [pares authentication url](#pares) for
        subsequent authorisation processing. You may prefer to provide a processing page whilst this is being processed.
        Processing with our systems should be relatively quick and be between 500ms - 3000ms however it is desirable to let
        the user see that something is happening rather than a pending browser.
        
        The main reason for ensuring that this controller is two fold:
        
        1. We are never in control of the user's browser in a server API call
        2. The controller is actioned on your site to ensure that any post actions from authorisation can be executed in real time
        
        To forward the user to the ACS, we recommend a simple auto submit HTML form.
        
        > Simple auto submit HTML form
        
        ```html
        <html lang="en">
        	<head>
                <title>Forward to ACS</title>
        		<script type="text/javascript">
                function onLoadEvent() { 
                    document.acs.submit(); 
                }
                </script>
                <noscript>You will require JavaScript to be enabled to complete this transaction</noscript>
            </head>
            <body onload="onLoadEvent();">
                <form name="acs" action="{{ACSURL from Response}}" method="POST">
                    <input type="hidden" name="PaReq" value="{{PaReq Packet from Response}}" />
                    <input type="hidden" name="TermUrl" value="{{Your Controller}}" />
                    <input type="hidden" name="MD" value="{{MD From Response}}" />
                </form>
            </body>
        </html>
        ```
        
        Please note that 3DSv1 is being phased out due to changes to strong customer authentication mechanisms. 3DSv2 addresses
        this and will solidify the authorisation and confirmation process.
        
        We provide a Test ACS for full 3DSv1 integration testing that simulates an ACS.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/AuthRequest'
            examples: 
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'AuthorisationRequest-example1.json'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/AuthRequest'
            examples: 
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'AuthorisationRequest-example1.xml'
      responses: 
        200: 
          description: A decision made by the result of processing.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Decision'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Decision'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /batch/retrieve: 
    post: 
      summary: BatchReportRequest
      tags: 
        - Batch Processing
      operationId: BatchReportRequest
