openapi: 3.0.0

################################################################################
#                              API Information                                 #
################################################################################
info:
  version: 6.1.1
  title: CityPay Payment API
  description: |

    This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It
    provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing,
    3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and
    Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.

    ## Compliance and Security
    <aside class="notice">
      Before we begin a reminder that your application will need to adhere to PCI-DSS standards to operate safely
      and to meet requirements set out by Visa and MasterCard and the PCI Security Standards Council including:
    </aside>

    * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at
      lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments
      as part of our compliance program.
    * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or
      primary access number (PAN)
    * The application must not display the full card number on receipts, it is recommended to mask the PAN
      and show the last 4 digits. The API will return this for you for ease of receipt creation
    * If you are developing a website, you will be required to perform regular scans on the network where you host the
      application to meet your compliance obligations
    * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information
      is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/)
    * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP
      address. Our application firewalls analyse data that may be an attempt to break a large number of security common
      security vulnerabilities.


  contact:
    name: CityPay Support
    url: https://citypay.com/customer-centre/technical-support.html
    email: support@citypay.com

# during dev, should point to your local machine
servers:
- url: https://api.citypay.com/v6
  description: Production processing endpoint
- url: https://sandbox.citypay.com/v6
  description: Testing service returning test results for all transactions

tags:
  - name: Card Holder Account
    description: |
      A Card holder account models a card holder and can register 1 or more cards for charging
      against. The account offers a credential on file option to the CityPay gateway alowing for 
      both card holder initiated and merchant initiated transaction processing.
      
      This can included unscheduled or scheduled transactions that can be requested through this API.
  - name: Operational
    description: Operations that are for operational purposes only such as checking connectivity to the API.
  - name: Payment Processing
    description: |
      The Payment Processing API offers standard and enhanced payment processing for MOTO, e-commerce
       and continuous authority transactions that include fraud and risk checking, 3D-Secure flows 
       and payment querying.

#--------------------------------------------------------------------------------
#                                    Paths                                     
#--------------------------------------------------------------------------------

paths:
  /account/{accountid}/register: 
    post: 
      summary: Card Registration
      tags: 
        - Card Holder Account
      operationId: AccountCardRegisterRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Allows for a card to be registered for the account. The card will be added for future 
        processing and will be available as a tokenised value for future processing.
        
        The card will be validated for
        
        0. Being a valid card number (luhn check)
        0. Having a valid expiry date
        0. Being a valid bin value.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/RegisterCard'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/RegisterCard'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A successfully registered card provides a reload of the account including the new card.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'

  /account/{accountid}: 
    get: 
      summary: Account Retrieval
      tags: 
        - Card Holder Account
      operationId: AccountRetrieveRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Allows for the retrieval of a card holder account for the given `id`. Should duplicate accounts exist
        for the same `id`, the first account created with that `id` will be returned.
        
        The account can be used for tokenisation processing by listing all cards assigned to the account.
        The returned cards will include all `active`, `inactive` and `expired` cards. This can be used to 
        enable a card holder to view their wallet and make constructive choices on which card to use.
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A card holder account that matches the account id provided in the request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
    delete: 
      summary: Account Deletion
      tags: 
        - Card Holder Account
      operationId: AccountDeleteRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further
        transactions will be alowed to be processed or actioned against this account.
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: An acknowledgment code of `001` that the card holder account has been marked for deletion.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'

  /ping: 
    post: 
      summary: Ping Request
      tags: 
        - Operational
      operationId: PingRequest
      description: |
        A ping request which performs a connection and authentication test to the CityPay API server. The request
        will return a standard Acknowledgement with a response code `044` to signify a successful
        ping.
        
        The ping call is useful to confirm that you will be able to access 
        the API from behind any firewalls and that the permission
        model is granting access from your source.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/Ping'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/Ping'
      responses: 
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        200: 
          description: A result of the ping request, returning on 044 response code on successful receipt of the ping request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'

  /capture: 
    post: 
      summary: Capture
      tags: 
        - Payment Processing
      operationId: CaptureRequest
      description: |
        _The capture process only applies to transactions which have been pre-authorised only._ 
        
        The capture process will ensure
        that a transaction will now settle. It is expected that a capture call will be provided within 3 days or
        a maximum of 7 days.
        
        A capture request is provided to confirm that you wish the transaction to be settled. This request can
        contain a final amount for the transaction which is different to the original authorisation amount. This
        may be useful in a delayed system process such as waiting for stock to be ordered, confirmed, or services
        provided before the final cost is known.
        
        When a transaction is completed, a new authorisation code may be created and a new confirmation
        can be sent online to the acquiring bank.
        
        Once the transaction has been processed. A standard [`Acknowledgement`](#acknowledgement) will be returned,
        outlining the result of the transaction. On a successful completion process, the transaction will
        be available for the settlement and completed at the end of the day.
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/CaptureRequest'
