openapi: 3.0.0

################################################################################
#                              API Information                                 #
################################################################################
info:
  version: 6.4.2
  title: CityPay Payment API
  description: |

    This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It
    provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing,
    3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and
    Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.

    ## Compliance and Security
    Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by 
    Visa and MasterCard and the PCI Security Standards Council. These include

    * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at
      lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments
      as part of our compliance program.
    * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or
      primary access number (PAN)
    * The application must not display the full card number on receipts, it is recommended to mask the PAN
      and show the last 4 digits. The API will return this for you for ease of receipt creation
    * If you are developing a website, you will be required to perform regular scans on the network where you host the
      application to meet your compliance obligations
    * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information
      is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/)
    * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP
      address. Our application firewalls analyse data that may be an attempt to break a large number of security common
      security vulnerabilities.


  contact:
    name: CityPay Support
    url: https://citypay.com/customer-centre/technical-support.html
    email: support@citypay.com

# during dev, should point to your local machine
servers:
- url: https://api.citypay.com
  description: Production processing endpoint
- url: https://sandbox.citypay.com
  description: Testing service returning test results for all transactions

tags:
  - name: Authorisation and Payment API
    description: .
  - name: Batch Processing API
    description: |
      Batch processing uses the Batch and Instalment Service (BIS) which allows for transaction processing against cardholder 
      accounts using a dynamic batch file. For merchants who process on schedules and dynamic amounts, the service allows for 
      the presentation of cardholder account references and transaction requirements to run as a scheduled batch.
  - name: Card Holder Account API
    description: |
      A cardholder account models a cardholder and can register 1 or more cards for tokenised charging. 
      
      The account offers a credential on file option to the CityPay gateway allowing for both cardholder initiated and 
      merchant initiated transaction processing.
      
      This can include unscheduled or scheduled transactions that can be requested through this API and include batch 
      processing options.
  - name: Direct Post API
    description: |
      The Direct Post Method for e-commerce payment is generally used by merchants that require more control over their
      payment form “look and feel” and can understand and implement the extra PCI DSS security controls that are required to
      protect their systems.
      
      The Direct Post Method uses the merchant’s website to generate the shopping cart and payment web pages. The merchant’s
      payment form, loaded in the customer’s browser, sends the cardholder data directly to CityPay’s API, ensuring cardholder
      data is not stored, processed, or transmitted via the merchant systems. The payment form, however, is provided by the
      merchant. The merchant’s systems are therefore in scope for additional PCI DSS controls, which are necessary to protect
      the merchant website against malicious individuals changing the form and capturing cardholder data.
      
      ### Direct Post Flow
      
      #### Simple Authorisation Flow
      
      The merchant’s website creates the payment page.
      
      1. The customer’s browser displays the payment page and posts the cardholder data directly to CityPay as a url-encoded
         payment form.
      2. CityPay receives the cardholder data and sends it for online authorisation, handling any ThreeDSecure authorisation
         challenges
      3. The merchant receives a HTTP 303 redirect, containing the result of the transaction as query parameters
      
      <img src="../../images/direct-post-flow.png" width="600" />
      
      #### Tokenisation Authorisation Flow
      
      The merchant’s website creates the payment page.
      
      1. The customer’s browser displays the payment page and posts the cardholder data directly to CityPay as a url-encoded
         payment form.
      2. CityPay receives the cardholder data and processes any ThreeDSecure authorisation and challenges.
      3. The merchant receives a HTTP `303` redirect containing the card details tokenised for consequential processing
      4. Once final confirmation is agreed at checkout, the generated token is forward to CityPay for realtime authorisation.
         This may by using HTTP redirects in a direct manner, or via an api level call
      
      #### Handling Redirects
      
      The direct post method uses HTTP `303` redirects to return data to your system. A `303` redirect differs to conventional 301
      or `302` redirects by telling the browser to not resend data if refresh is pressed.
      
      Payments should be developed to cater for failure. Transactions may not complete authorisation at the challenge stage or
      decline either due to insufficient funds or transient network conditions. To ensure correct payment flow, the direct
      post API requires
      
      1. a `redirectSuccess` url. This is used to forward the result of authorisation.
      2. a `redirectFailure` url. This is used to forward any errors that are due to invalid requests or payment failures.
      
      #### Domain Keys
      
      To allow for processing of transactions in a direct manner, CityPay provide domain keys. This value is provided on the
      initial direct post call and must be run on a pre-registered host. Our validation processes will check the `Origin` or
      `Referer`   HTTP headers to ensure that the domain keys are valid. A domain key can be registered for 1 or more domains.
  - name: Operational API Functions
    description: Operations that are for operational purposes only such as checking connectivity to the API.
  - name: Paylink API
    description: |
      CityPay Paylink makes online e-commerce easier to implement by handling the card payment process directly with the cardholder's browser and CityPay's payment processing servers, allowing you to concentrate on your business whilst allowing us to manage the payment process.
      
      0. Simplified payment solutions.
      0. payment processing is handled by our secure web servers adding security and confidence to your shoppers.
      0. 3D-Secure authentication is available within the application without any difficult MPI integration, allowing for immediate Verified by Visa and MasterCard SecureCode processing.
      0. customisation may be performed on the secure payment form.
      0. significantly reduced technical and financial overheads associated with software implementation and PCI compliance.
      1. reduced time-to-market.
      
      The CityPay API offers embedded end-point calls to Paylink offering advanced features of generated tokens.
      
      For further information on Paylink see [Paylink Online Documentation](https://citypay.github.io/api-docs/paylink).

#--------------------------------------------------------------------------------
#                                    Paths                                     
#--------------------------------------------------------------------------------

paths:
  /v6/paylink/{token}/reopen: 
    put: 
      summary: Reopens Paylink Token
      tags: 
        - Paylink API
      operationId: TokenReopenRequest
      parameters: 
        - name: token
          in: path
          required: true
          description: The token returned by the create token process.
          schema: 
            type: string
      description: Allows for a Paylink Token to be reopened if a Token has been previously closed and payment has not yet been made.
      security: 
      - cp-api-key: []
      responses: 
        200: 
          description: Confirms that the token was reopened.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /v6/authorise: 
    post: 
      summary: Authorisation
      tags: 
        - Authorisation and Payment API
      operationId: AuthorisationRequest
      description: |
        An authorisation process performs a standard transaction authorisation based on the provided parameters of its request.
        The CityPay gateway will route your transaction via an Acquiring bank for subsequent authorisation to the appropriate card 
        schemes such as Visa or MasterCard.
        
        The authorisation API should be used for server environments to process transactions on demand and in realtime. 
        
        The authorisation API can be used for multiple types of transactions including E-commerce, mail order, telephone order,
        customer present (keyed), continuous authority, pre-authorisation and others. CityPay will configure your account for 
        the appropriate coding and this will perform transparently by the gateway. 
        
        Data properties that are required, may depend on the environment you are conducting payment for. Our API aims to be
         flexible enough to cater for these structures. Our integration team will aid you in providing the necessary data to 
         transact. 
         
         
        ## E-commerce workflows
         
        For E-commerce transactions requiring 3DS, the API contains a fully accredited in built mechanism to handle authentication.
        
        The Api and gateway has been accredited extensively with both Acquirers and Card Schemes to simplify the nature of these calls
        into a simple structure for authentication, preventing integrators from performing lengthy and a costly accreditations with
        Visa and MasterCard.
        
        3D-secure has been around for a number of years and aims to shift the liability of a transaction away from a merchant back
        to the card holder. A *liability shift* determines whether a card holder can charge back a transaction as unknown. Effectively
        the process asks for a card holder to authenticate the transaction prior to authorisation producing a Cardholder 
        verification value (CAVV) and ecommerce indicator (ECI) as evidence of authorisation.
        
        3DS version 1 has now been replaced by 3DS version 2 to provide secure customer authentication (SCA) in line with EU regulation.
        3DSv2 is being phased out and any accounts using version 1 of the protocol is expected to be migrated by March 2022. 
        
        Any new integrations should only consider 3DSv2 flows. 
        
        ### 3DSv2
        
        ```json
        { 
          "RequestChallenged": {
            "acsurl": "https://bank.com/3DS/ACS",
            "creq": "SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...",
            "merchantid": 12345,
            "transno": 1,
            "threedserver_trans_id": "d652d8d2-d74a-4264-a051-a7862b10d5d6"
          }               
        }
        ```
        
        ```xml
        <RequestChallenged>
          <acsurl>https://bank.com/3DS/ACS</acsurl>
          <creq>SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...</creq>
          <merchantid>12345</merchantid>
          <transno>1</transno>
          <threedserver_trans_id>d652d8d2-d74a-4264-a051-a7862b10d5d6</threedserver_trans_id>
        </RequestChallenged>
        ```
        
        CityPay support 3DS version 2.1 for Verified by Visa, MasterCard Identity Check and American Express SafeKey 2.1. Version
        2.2 is currently in development however this will be a seamless upgrade for all integrations.
        
        #### 3-D Secure - None
        
        ![3DSv2 Frctionless Flow](/images/3dsv2-no3d.png)
        
        A basic flow may involve no 3-D secure processing. This could happen if there is no ability to perform authentication.
        An enrollment check may apply an "attempted" resolution to processing. In this instance a transaction may not meet any
        liability shift. A transaction may result in a decline due to this. We are also able to prevent from transactions being
        presented for authorisation if this occurs. 
        
        #### 3-D Secure - Frictionless
        
        ![3DSv2 Frctionless Flow](/images/3dsv2-frictionless.png)
        
        E-commerce transactions supporting 3DSv2 can benefit from seamlessly authenticated transactions which may perform a 
        "frictionless" flow. This method will authenticate low risk transactions with minimal impact to a 
        standard authorisation flow. Our API simply performs this on behalf of you the developer, the merchant and cardholder.
        
        No redirection occurs and hence the flow is called frictionless and will appear as though a simple transaction 
        authorisation has occurred.
        
        #### 3-D Secure - Challenge
        
        ![3DSv2 Frctionless Flow](/images/3dsv2-challenge.png)
        
        A transaction that is deemed as higher risk my be "challenged". In this instance, the API will return a
        [request challenge](#requestchallenged) which will require your integration to forward the cardholder's browser to the 
        given [ACS url](#acsurl). This should be performed by posting the [creq](#creq) value (the challenge request value). 
        
        Once complete, the ACS will have already been in touch with our servers by sending us a result of the authentication
        known as `RReq`.
        
        To maintain session state, a parameter `threeDSSessionData` can be posted to the ACS url and will be returned alongside 
        the `CRes` value. This will ensure that any controller code will be able to isolate state between calls. This field
        is to be used by your own systems rather than ours and may be any value which can uniquely identify your cardholder's
        session. As an option, we do provide a `threedserver_trans_id` value in the `RequestChallenged` packet which can be used
        for the `threeDSSessionData` value as it is used to uniquely identify the 3D-Secure session. 
        
        A common method of maintaining state is to provide a session related query string value in the `merchant_termurl` value
        (also known as the `notificationUrl`). For example providing a url of `https://mystore.com/checkout?token=asny2348w4561..`
        could return the user directly back to their session with your environment.
        
        Once you have received a `cres` post from the ACS authentication service, this should be POSTed to the [cres](#cres) 
        endpoint to perform full authorisation processing. 
        
        Please note that the CRes returned to us is purely a mechanism of acknowledging that transactions should be committed for
        authorisation. The ACS by this point will have sent us the verification value (CAVV) to perform a liability shift. The CRes
        value will be validated for receipt of the CAVV and subsequently may return response codes illustrating this. 
        
        To forward the user to the ACS, we recommend a simple auto submit HTML form.
        
        > Simple auto submit HTML form
        
        ```html
        <html lang="en">
        	<head>
                <title>Forward to ACS</title>
        		<script type="text/javascript">
                function onLoadEvent() { 
                    document.acs.submit(); 
                }
                </script>
                <noscript>You will require JavaScript to be enabled to complete this transaction</noscript>
            </head>
            <body onload="onLoadEvent();">
                <form name="acs" action="{{ACSURL from Response}}" method="POST">
                    <input type="hidden" name="creq" value="{{CReq Packet from Response}}" />
                    <input type="hidden" name="threeDSSessionData" value="{{session-identifier}}" />
                </form>
            </body>
        </html>
        ```
        
        A full ACS test suite is available for 3DSv2 testing.
                
        ### Testing 3DSv2 Integrations
        
        The API provides a mock 3dsV2 handler which performs a number of scenarios based on the value of the CSC in the request.
        
        | CSC Value | Behaviour |
        |-----------|-----------|
        | 731       | Frictionless processing - Not authenticated |
        | 732       | Frictionless processing - Account verification count not be performed |        
        | 733       | Frictionless processing - Verification Rejected |        
        | 741       | Frictionless processing - Attempts Processing |        
        | 750       | Frictionless processing - Authenticated  |        
        | 761       | Triggers an error message |  
        | Any       | Challenge Request |       
        
        
        #### 3DSv1
        
        **Please note that 3DSv1 should now be considered as deprecated.**
        
        ```json
        { 
          "AuthenticationRequired": {
            "acsurl": "https://bank.com/3DS/ACS",
            "pareq": "SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...",
            "md": "WQgZXZlcnl0aGluZyBiZW"
          }               
        }
        ```
        
        ```xml
        <AuthenticationRequired>
         <acsurl>https://bank.com/3DS/ACS</acsurl>
         <pareq>SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN00...</pareq>
         <md>WQgZXZlcnl0aGluZyBiZW</md>
        </AuthenticationRequired>
        ```
        
        For E-commerce transactions requiring 3DSv1, the API contains a built in MPI which will be called to check whether the
        card is participating in 3DSv1 with Verified by Visa or MasterCard SecureCode. We only support Amex SafeKey with 3DSv2. Should the card be enrolled, a payer
        request (PAReq) value will be created and returned back as an [authentication required](#authenticationrequired) response object.
        
        Your system will need to process this authentication packet and forward the user's browser to an authentication server (ACS)
        to gain the user's authentication. Once complete, the ACS will produce a HTTP `POST` call back to the URL supplied in
        the authentication request as `merchant_termurl`. This URL should behave as a controller and handle the post data from the
        ACS and on a forked server to server HTTP request, forward this data to the [pares authentication url](#pares) for
        subsequent authorisation processing. You may prefer to provide a processing page whilst this is being processed.
        Processing with our systems should be relatively quick and be between 500ms - 3000ms however it is desirable to let
        the user see that something is happening rather than a pending browser.
        
        The main reason for ensuring that this controller is two fold:
        
        1. We are never in control of the user's browser in a server API call
        2. The controller is actioned on your site to ensure that any post actions from authorisation can be executed in real time
        
        To forward the user to the ACS, we recommend a simple auto submit HTML form.
        
        > Simple auto submit HTML form
        
        ```html
        <html lang="en">
        	<head>
                <title>Forward to ACS</title>
        		<script type="text/javascript">
                function onLoadEvent() { 
                    document.acs.submit(); 
                }
                </script>
                <noscript>You will require JavaScript to be enabled to complete this transaction</noscript>
            </head>
            <body onload="onLoadEvent();">
                <form name="acs" action="{{ACSURL from Response}}" method="POST">
                    <input type="hidden" name="PaReq" value="{{PaReq Packet from Response}}" />
                    <input type="hidden" name="TermUrl" value="{{Your Controller}}" />
                    <input type="hidden" name="MD" value="{{MD From Response}}" />
                </form>
            </body>
        </html>
        ```
        
        Please note that 3DSv1 is being phased out due to changes to strong customer authentication mechanisms. 3DSv2 addresses
        this and will solidify the authorisation and confirmation process.
        
        We provide a Test ACS for full 3DSv1 integration testing that simulates an ACS.
      security: 
      - cp-api-key: []
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/AuthRequest'
            examples: 
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'AuthorisationRequest-example1.json'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/AuthRequest'
            examples: 
              example1: 
                summary: Basic capture call for a merchant with a given identifier
                externalValue: 'AuthorisationRequest-example1.xml'
      responses: 
        200: 
          description: A decision made by the result of processing.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Decision'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Decision'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /v6/ping: 
    post: 
      summary: Ping Request
      tags: 
        - Operational API Functions
      operationId: PingRequest
      description: |
        A ping request which performs a connection and authentication test to the CityPay API server. The request
        will return a standard Acknowledgement with a response code `044` to signify a successful
        ping.
        
        The ping call is useful to confirm that you will be able to access 
        the API from behind any firewalls and that the permission
        model is granting access from your source.
      security: 
      - cp-domain-key: []
      - cp-api-key: []
      requestBody: 
        required: true
        content: 
          application/x-www-form-urlencoded: 
            schema: 
              $ref: '#/components/schemas/Ping'
          application/json: 
            schema: 
              $ref: '#/components/schemas/Ping'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/Ping'
      responses: 
        200: 
          description: A result of the ping request, returning on 044 response code on successful receipt of the ping request.
          content: 
            application/x-www-form-urlencoded: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/x-www-form-urlencoded: 
              schema: 
                $ref: '#/components/schemas/Error'
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /direct/token: 
    post: 
      summary: Direct Post Token Request
      tags: 
        - Direct Post API
      operationId: TokenRequest
      description: |
        Perform a request for authorisation for a previously generated token. This flow will return an authorisation
        response stating that the transaction was approved or declined.
      security: 
      - cp-domain-key: []
      - cp-api-key: []
      requestBody: 
        required: true
        content: 
          application/x-www-form-urlencoded: 
            schema: 
              $ref: '#/components/schemas/DirectTokenAuthRequest'
          application/json: 
            schema: 
              $ref: '#/components/schemas/DirectTokenAuthRequest'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/DirectTokenAuthRequest'
      responses: 
        200: 
          description: A result of an authorisation process if called via an XHR method.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'
            application/xml: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'
        303: 
          description: Redirect. A result of a successful tokenisation or authorisation process, redirecting to the success URL.
          content: 
            application/x-www-form-urlencoded: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'
        307: 
          description: Redirect. A result of a non-successful tokenisation or authorisation process, redirecting to the failure URL.
          content: 
            application/x-www-form-urlencoded: 
              schema: 
                $ref: '#/components/schemas/Error'
        401: 
          description: Unauthorized. No domain key has been provided and is required for this operation.
        403: 
          description: Forbidden. The domain key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        406: 
          description: Not Acceptable. Should the incoming data not be validly determined.
        412: 
          description: Bad Request. Should the incoming data not be validly determined and an error code results.
          content: 
            application/x-www-form-urlencoded: 
              schema: 
                $ref: '#/components/schemas/Error'
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /v6/paylink/create: 
    post: 
      summary: Create Paylink Token
      tags: 
        - Paylink API
      operationId: TokenCreateRequest
      description: Creates a Paylink token from the CityPay API.
      security: 
      - cp-api-key: []
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/TokenRequestModel'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/TokenRequestModel'
      responses: 
        200: 
          description: Response defining the result of the token request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/TokenCreated'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/TokenCreated'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /v6/batch/status: 
    post: 
      summary: CheckBatchStatus
      tags: 
        - Batch Processing API
      operationId: CheckBatchStatusRequest
      description: The operation is used to retrieve the status of a batch process.
      security: 
      - cp-api-key: []
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/CheckBatchStatus'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/CheckBatchStatus'
      responses: 
        200: 
          description: The status of batches provided in the request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/CheckBatchStatusResponse'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/CheckBatchStatusResponse'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /v6/refund: 
    post: 
      summary: Refund
      tags: 
        - Authorisation and Payment API
      operationId: RefundRequest
      description: |
        A refund request which allows for the refunding of a previous transaction up 
        and to the amount of the original sale. A refund will be performed against the 
        original card used to process the transaction.
      security: 
      - cp-api-key: []
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/RefundRequest'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/RefundRequest'
      responses: 
        200: 
          description: A result of the refund of sale processing.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/AuthResponse'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /v6/batch/retrieve: 
    post: 
      summary: BatchReportRequest
      tags: 
        - Batch Processing API
      operationId: BatchReportRequest
      description: The operation is used to retrieve a report of the result of a batch process.
      security: 
      - cp-api-key: []
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/BatchReportRequest'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/BatchReportRequest'
      responses: 
        200: 
          description: The report for a given batch.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/BatchReportResponseModel'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/BatchReportResponseModel'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /v6/paylink/token/changes: 
    post: 
      summary: Paylink Token Audit
      tags: 
        - Paylink API
      operationId: TokenStatusChangesRequest
      description: |
        Obtains any changes on Paylink Tokens since a given date and time. This allows for a merchant to regularly check on 
        activity over a collection of Paylink Tokens and to check on any events that may have occurred. If a Token is `Closed` 
        it is not considered.
        
        Only statuses that have been appended since the given date and time is returned.
      security: 
      - cp-api-key: []
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/TokenStatusChangeRequest'
          text/xml: 
            schema: 
              $ref: '#/components/schemas/TokenStatusChangeRequest'
      responses: 
        200: 
          description: Changes from tokens actioned after the pivotal date provided in the request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/TokenStatusChangeResponse'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/TokenStatusChangeResponse'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /v6/account/{accountid}: 
    get: 
      summary: Account Retrieval
      tags: 
        - Card Holder Account API
      operationId: AccountRetrieveRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Allows for the retrieval of a card holder account for the given `id`. Should duplicate accounts exist
        for the same `id`, the first account created with that `id` will be returned.
        
        The account can be used for tokenisation processing by listing all cards assigned to the account.
        The returned cards will include all `active`, `inactive` and `expired` cards. This can be used to 
        enable a card holder to view their wallet and make constructive choices on which card to use.
      security: 
      - cp-api-key: []
      responses: 
        200: 
          description: A card holder account that matches the account id provided in the request.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/CardHolderAccount'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'
    delete: 
      summary: Account Deletion
      tags: 
        - Card Holder Account API
      operationId: AccountDeleteRequest
      parameters: 
        - name: accountid
          in: path
          required: true
          description: The account id that refers to the customer's account no. This value will have been provided when setting up the card holder account.
          schema: 
            type: string
      description: |
        Allows for the deletion of an account. The account will marked for deletion and subsequent purging. No further
        transactions will be alowed to be processed or actioned against this account.
      security: 
      - cp-api-key: []
      responses: 
        200: 
          description: An acknowledgment code of `001` that the card holder account has been marked for deletion.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Acknowledgement'
        400: 
          description: Bad Request. Should the incoming data not be validly determined.
        401: 
          description: Unauthorized. No api key has been provided and is required for this operation.
        403: 
          description: Forbidden. The api key was provided and understood but is either incorrect or does not have permission to access the account provided on the request.
        422: 
          description: Unprocessable Entity. Should a failure occur that prevents processing of the API call.
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Error'
            text/xml: 
              schema: 
                $ref: '#/components/schemas/Error'

  /direct/cres/auth/{uuid}: 
    post: 
      summary: Handles a CRes response from ACS, returning back the result of authorisation
      tags: 
        - Direct Post API
      operationId: DirectCResAuthRequest
      parameters: 
        - name: uuid
          in: path
          required: true
          description: An identifier used to track the CReq/CRes cycle.
          schema: 
            type: string
