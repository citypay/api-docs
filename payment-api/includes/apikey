<p>A valid key is programmatically generated using
 - your client id
 - your client key</p>

<p>The algorithm for generating a key is
0. create a 256 bit <code>nonce</code> value such i.e. <code>ACB875AEF083DE292299BD69FCDEB5C5</code>
0. create a <code>dt</code> value which is the current date and time in the format <code>yyyyMMddHHmm</code> convert to bytes from a hex representation
0. generate a HmacSHA256 <code>hash</code> for the client licence key using a concatenation of clientid, nonce, dt
0. create a packet value of <code>clientId</code>, <code>nonce</code>, and <code>hash</code> delimited by <code>\u003A</code>
0. Base64 encode the packet</p>

<p>The following example uses JavaScript and CryptoJS</p>
<pre class="highlight javascript tab-javascript"><code><span class="kr">export</span> <span class="kd">function</span> <span class="nx">generateApiKey</span><span class="p">(</span><span class="nx">clientId</span><span class="p">,</span> <span class="nx">licenceKey</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">())</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">nonce</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">nonce</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">lib</span><span class="p">.</span><span class="nx">WordArray</span><span class="p">.</span><span class="nx">random</span><span class="p">(</span><span class="mi">128</span> <span class="o">/</span> <span class="mi">8</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">nonce</span> <span class="o">===</span> <span class="s1">'string'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">nonce</span> <span class="o">=</span> <span class="nx">Hex</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">nonce</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">"Unsupported nonce type"</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="kr">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">Utf8</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">clientId</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">nonce</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">lib</span><span class="p">.</span><span class="nx">WordArray</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">dtToBuffer</span><span class="p">(</span><span class="nx">dt</span><span class="p">)));</span>
  <span class="kr">const</span> <span class="nx">hash</span> <span class="o">=</span> <span class="nx">HmacSHA256</span><span class="p">(</span><span class="nx">msg</span><span class="p">,</span> <span class="nx">Utf8</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">licenceKey</span><span class="p">));</span>
  <span class="kr">const</span> <span class="nx">packet</span> <span class="o">=</span> <span class="nx">Utf8</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">clientId</span> <span class="o">+</span> <span class="s1">'\u003A'</span> <span class="o">+</span> <span class="nx">nonce</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="nx">Hex</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'\u003A'</span><span class="p">).</span><span class="nx">concat</span><span class="p">(</span><span class="nx">hash</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">Base64</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">packet</span><span class="p">);</span>
<span class="p">}</span>
</code></pre>
<p>Examples for unit testing:</p>
<pre class="highlight plaintext"><code>  let exampleNonce = "ACB875AEF083DE292299BD69FCDEB5C5";
  let exampleDate = new Date(2020, 0, 1, 9, 23, 0, 0);
  let apiKey = generateApiKey("Dummy", "7G79TG62BAJTK669", exampleNonce, exampleDate);
  expect(apiKey).toBe('RHVtbXk6QUNCODc1QUVGMDgzREUyOTIyOTlCRDY5RkNERUI1QzU6tleiG2iztdBCGz64E3/HUhfKIdGWr3VnEtu2IkcmFjA=');
</code></pre>