<h3 id='api-key'>API Key</h3>
<p><strong>cp-api-key</strong></p>

<p>header <code>cp-api-key</code></p>

<p>The <code>cp-api-key</code> authentication header is required for all payment processing access.
All calls using this key will be validated against an acceptance list of IP addresses
and calls are scrutinised by the CityPay application firewall for security protection
and attack mitigation.</p>

<p>A key has been designed to:
- be temporal and time based. The key rotates frequently to protect against replay attacks and to ensure a
  computation derives your client details from the request
- to remain secret, the key value is your access permission to process transactions and
  although we have preventative measures to protect the key, undue exposure is not desirable
- to allow processing against multiple merchant accounts that belong to your CityPay account.
- to use a HTTP header value to protect undue logging mechanisms from logging data packet values and
  logically seperates authentication concerns from the body of data.
- keys typically have a TTL of 5 minutes in production and 20 minutes in Sandbox.
- keys should be rotated often and is recommended on each API call</p>

<p>A valid key is programmatically generated using</p>

<ul>
<li>your client id</li>
<li>your client key</li>
</ul>

<p>The algorithm for generating a key is</p>

<ol>
<li>create a 256 bit <code>nonce</code> value such i.e. <code>ACB875AEF083DE292299BD69FCDEB5C5</code></li>
<li>create a <code>dt</code> value which is the current date and time in the format <code>yyyyMMddHHmm</code> convert to bytes from a hex representation</li>
<li>generate a HmacSHA256 <code>hash</code> for the client licence key using a concatenation of clientid, nonce, dt</li>
<li>create a packet value of <code>clientId</code>, <code>nonce</code>, and <code>hash</code> delimited by <code>\u003A</code></li>
<li>Base64 encode the packet</li>
</ol>

<blockquote>
<p>The following example uses JavaScript and CryptoJS</p>
</blockquote>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="k">export</span> <span class="kd">function</span> <span class="nx">generateApiKey</span><span class="p">(</span><span class="nx">clientId</span><span class="p">,</span> <span class="nx">licenceKey</span><span class="p">,</span> <span class="nx">nonce</span><span class="p">,</span> <span class="nx">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">())</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">nonce</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">nonce</span> <span class="o">=</span> <span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">lib</span><span class="p">.</span><span class="nx">WordArray</span><span class="p">.</span><span class="nx">random</span><span class="p">(</span><span class="mi">128</span> <span class="o">/</span> <span class="mi">8</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">nonce</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">nonce</span> <span class="o">=</span> <span class="nx">Hex</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">nonce</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Unsupported nonce type</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">Utf8</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">clientId</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">nonce</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">CryptoJS</span><span class="p">.</span><span class="nx">lib</span><span class="p">.</span><span class="nx">WordArray</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">dtToBuffer</span><span class="p">(</span><span class="nx">dt</span><span class="p">)));</span>
  <span class="kd">const</span> <span class="nx">hash</span> <span class="o">=</span> <span class="nx">HmacSHA256</span><span class="p">(</span><span class="nx">msg</span><span class="p">,</span> <span class="nx">Utf8</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">licenceKey</span><span class="p">));</span>
  <span class="kd">const</span> <span class="nx">packet</span> <span class="o">=</span> <span class="nx">Utf8</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">clientId</span> <span class="o">+</span> <span class="dl">'</span><span class="se">\</span><span class="s1">u003A</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">nonce</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="nx">Hex</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="dl">'</span><span class="se">\</span><span class="s1">u003A</span><span class="dl">'</span><span class="p">).</span><span class="nx">concat</span><span class="p">(</span><span class="nx">hash</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">Base64</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">packet</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<blockquote>
<p>Example values for unit testing:</p>
</blockquote>
<div class="highlight"><pre class="highlight plaintext"><code>  let exampleNonce = "ACB875AEF083DE292299BD69FCDEB5C5";
  let exampleDate = new Date(2020, 0, 1, 9, 23, 0, 0);
  let apiKey = generateApiKey("Dummy", "7G79TG62BAJTK669", exampleNonce, exampleDate);
  expect(apiKey).toBe('RHVtbXk6QUNCODc1QUVGMDgzREUyOTIyOTlCRDY5RkNERUI1QzU6tleiG2iztdBCGz64E3/HUhfKIdGWr3VnEtu2IkcmFjA=');
</code></pre></div>
<aside class="notice">
We have example code in varying languages, please consult with your account and integration point of contact for details.
</aside>
